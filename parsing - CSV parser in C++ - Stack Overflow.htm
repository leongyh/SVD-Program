<!DOCTYPE html>
<!-- saved from url=(0058)http://stackoverflow.com/questions/1120140/csv-parser-in-c -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        
    <title>parsing - CSV parser in C++ - Stack Overflow</title>
    <link rel="shortcut icon" href="http://cdn.sstatic.net/stackoverflow/img/favicon.ico">
    <link rel="apple-touch-icon" href="http://cdn.sstatic.net/stackoverflow/img/apple-touch-icon.png">
    <link rel="search" type="application/opensearchdescription+xml" title="Stack Overflow" href="http://stackoverflow.com/opensearch.xml">
    
    <script type="text/javascript" async="" src="http://engine.adzerk.net/z/8277/adzerk1_2_4_43,adzerk2_2_17_45,adzerk3_2_4_44?keywords=c%2b%2b,parsing,text,csv&xReferrer=https://www.google.com/"></script><script type="text/javascript" async="" src="./parsing - CSV parser in C++ - Stack Overflow_files/ga.js"></script><script type="text/javascript" async="" src="./parsing - CSV parser in C++ - Stack Overflow_files/quant.js"></script><script type="text/javascript" src="./parsing - CSV parser in C++ - Stack Overflow_files/jquery.min.js"></script><style type="text/css"></style>
    <script type="text/javascript" src="./parsing - CSV parser in C++ - Stack Overflow_files/stub.js"></script>
    <link rel="stylesheet" type="text/css" href="./parsing - CSV parser in C++ - Stack Overflow_files/all.css">
    
    <meta name="relativepagescore" content="441288">
    <link rel="canonical" href="./parsing - CSV parser in C++ - Stack Overflow_files/parsing - CSV parser in C++ - Stack Overflow.htm">
    <link rel="alternate" type="application/atom+xml" title="Feed for question &#39;CSV parser in C++&#39;" href="http://stackoverflow.com/feeds/question/1120140">
    <script type="text/javascript">
        
        StackExchange.ready(function () {


            
            StackExchange.question.init({showAnswerHelp:true,totalCommentCount:2,shownCommentCount:2,highlightColor:'#F4A83D',backgroundColor:'#FFF',questionId:1120140});

            styleCode();

                StackExchange.realtime.subscribeToQuestion('1', '1120140');
            
                
        });
    </script>


    <script type="text/javascript">
        StackExchange.init({"stackAuthUrl":"https://stackauth.com","serverTime":1361701955,"styleCode":true,"enableUserHovercards":true,"site":{"name":"Stack Overflow","description":"Q&A for professional and enthusiast programmers","isNoticesTabEnabled":true,"recaptchaPublicKey":"6LdchgIAAAAAAJwGpIzRQSOFaO0pU6s44Xt8aTwc","enableSocialMediaInSharePopup":true},"user":{"fkey":"cc26a9a6502719400ff92191e4f5f1ea","isAnonymous":true}});
        StackExchange.using.setCacheBreakers({"js/prettify-full.js":"c862bf93b3ec","js/moderator.js":"f5bd552c88e3","js/full-anon.js":"e180473cff84","js/full.js":"f8ceb895a1a2","js/wmd.js":"8065d309a883","js/third-party/jquery.autocomplete.min.js":"e5f01e97f7c3","js/mobile.js":"6eb68240242f","js/help.js":"fc9fb0517db2","js/tageditor.js":"450c9e8426fc","js/tageditornew.js":"ef08d419a8ca","js/inline-tag-editing.js":"7c98fd8ff2a0","js/revisions.js":"7273bb714bba","js/review.js":"fb18d7df76ec","js/tagsuggestions.js":"c019341b234d","js/post-validation.js":"d30d80f45045"});
        
    </script>


    <script type="text/javascript">
        StackExchange.using(
            "gps",
            function () {
                StackExchange.gps.init(false);
            }
        );
    </script>

<script type="text/javascript"></script><link rel="stylesheet" type="text/css" href="./parsing - CSV parser in C++ - Stack Overflow_files/ndhui.css"><script async="" type="text/javascript" src="./parsing - CSV parser in C++ - Stack Overflow_files/full-anon.js"></script><script async="" type="text/javascript" src="./parsing - CSV parser in C++ - Stack Overflow_files/prettify-full.js"></script></head>
<body class="question-page"><script type="text/javascript" language="javascript" src="./parsing - CSV parser in C++ - Stack Overflow_files/ndhui.js"></script>
    <noscript>&lt;div id="noscript-padding"&gt;&lt;/div&gt;</noscript>
    <div id="notify-container"></div>
    <div id="overlay-header"></div>
    <div id="custom-header"></div>

    <div class="container">
        <div id="header">
            <div id="portalLink">
                <a class="genu" onclick="StackExchange.ready(function(){genuwine.click();});return false;">Stack Exchange</a>
            </div>
            <div id="topbar">
                <div id="hlinks">
                    









<span id="hlinks-user">

</span>
<span id="hlinks-nav">
                   <a href="http://stackoverflow.com/users/login?returnurl=%2fquestions%2f1120140%2fcsv-parser-in-c">log in</a>

 <span class="lsep">|</span>
                    <a href="http://careers.stackoverflow.com/">careers 2.0</a>

 <span class="lsep">|</span>

</span>
<span id="hlinks-custom">
        <a href="http://chat.stackoverflow.com/">chat</a>

 <span class="lsep">|</span>
            <a href="http://meta.stackoverflow.com/">meta</a>

 <span class="lsep">|</span>
        <a href="http://stackoverflow.com/about">about</a>

 <span class="lsep">|</span>
    <a href="http://stackoverflow.com/faq">faq</a>

</span>
                </div>
                <div id="hsearch">
                    <form id="search" action="http://stackoverflow.com/search" method="get" autocomplete="off">
                    <div>
                        <input autocomplete="off" name="q" class="textbox" placeholder="search" tabindex="1" type="text" maxlength="240" size="28" value="">
                    </div>
                    </form>
                </div>
            </div>
            <br class="cbt">
            <div id="hlogo">
                <a href="http://stackoverflow.com/">Stack Overflow</a>
            </div>
            <div id="hmenus">
                <div class="nav mainnavs">
                    <ul>
                        <li class="youarehere"><a id="nav-questions" href="http://stackoverflow.com/questions">Questions</a></li>
                        <li><a id="nav-tags" href="http://stackoverflow.com/tags">Tags</a></li>
                        <li><a id="nav-users" href="http://stackoverflow.com/users">Users</a></li>
                        <li><a id="nav-badges" href="http://stackoverflow.com/badges">Badges</a></li>
                        <li><a id="nav-unanswered" href="http://stackoverflow.com/unanswered">Unanswered</a></li>
                    </ul>
                </div>
                <div class="nav askquestion">
                    <ul>
                        <li>
                            <a id="nav-askquestion" href="http://stackoverflow.com/questions/ask">Ask Question</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        



        <div id="content">
            

<div itemscope="" itemtype="http://schema.org/Article">
<link itemprop="image" href="http://cdn.sstatic.net/stackoverflow/img/apple-touch-icon.png">
<div id="question-header">
    <h1 itemprop="name"><a href="./parsing - CSV parser in C++ - Stack Overflow_files/parsing - CSV parser in C++ - Stack Overflow.htm" class="question-hyperlink">CSV parser in C++</a></h1>
</div>
<div id="mainbar">



<div class="question" data-questionid="1120140" id="question">
    
            <div class="everyonelovesstackoverflow" id="adzerk1">
        </div>


    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1120140">
    <a class="vote-up-off" title="This question shows research effort; it is useful and clear (click again to undo)">up vote</a>
    <span class="vote-count-post ">51</span>
    <a class="vote-down-off" title="This question does not show any research effort; it is unclear or not useful (click again to undo)">down vote</a>
    
    <a class="star-off" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#" title="This is a favorite question (click again to undo)">favorite</a>
    <div class="favoritecount"><b>42</b></div>   

 
</div>

            </td>
            
<td class="postcell">
<div>
    <div class="post-text" itemprop="description">
        <p>All I need is a good CSV file parser for C++.  At this point it can really just be a comma-delimited parser (ie don't worry about escaping new lines and commas).  The main need is a line-by-line parser that will return a vector for the next line each time the method is called.</p>

<p>I found this article which looks quite promising:
<a href="http://www.boost.org/doc/libs/1_35_0/libs/spirit/example/fundamental/list_parser.cpp">http://www.boost.org/doc/libs/1_35_0/libs/spirit/example/fundamental/list_parser.cpp</a></p>

<p>I've never used Boost's Spirit, but am willing to try it.  Is it overkill/bloated or is it fast and efficient?  Does anyone have faster algorithms using STL or anything else?</p>

<p>Thanks!</p>

    </div>
    <div class="post-taglist">
        <a href="http://stackoverflow.com/questions/tagged/c%2b%2b" class="post-tag" title="" rel="tag">c++</a> <a href="http://stackoverflow.com/questions/tagged/parsing" class="post-tag" title="" rel="tag">parsing</a> <a href="http://stackoverflow.com/questions/tagged/text" class="post-tag" title="show questions tagged &#39;text&#39;" rel="tag">text</a> <a href="http://stackoverflow.com/questions/tagged/csv" class="post-tag" title="show questions tagged &#39;csv&#39;" rel="tag">csv</a> 
    </div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/q/1120140" title="short permalink to this question" class="short-link" id="link-post-1120140">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1120140/edit" class="suggest-edit-post" title="">improve this question</a></div>            </td>
    <td align="right" class="post-signature">


    <div class="user-info ">
        <div class="user-action-time">
                            edited
                             <a href="http://stackoverflow.com/posts/1120140/revisions" title="show all edits to this post"><span title="2012-07-10 07:57:37Z" class="relativetime">Jul 10 '12 at 7:57</span></a>

        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/85371/sehe"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/6d52c235ec6dd15f30bab444103e7af2" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/85371/sehe">sehe</a><br>
            <span class="reputation-score" title="reputation score 68831" dir="ltr">68.8k</span><span title="5 gold badges"><span class="badge1"></span><span class="badgecount">5</span></span><span title="54 silver badges"><span class="badge2"></span><span class="badgecount">54</span></span><span title="111 bronze badges"><span class="badge3"></span><span class="badgecount">111</span></span>
        </div>
    </div>
    </td>
    <td class="post-signature owner">
        

    <div class="user-info ">
        <div class="user-action-time">
                                    asked
 <span title="2009-07-13 15:25:50Z" class="relativetime">Jul 13 '09 at 15:25</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/125380/user1"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/4c2e7e7267110bb949cbe4aac47190f2" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/125380/user1">User1</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">5,810</span><span title="5 gold badges"><span class="badge1"></span><span class="badgecount">5</span></span><span title="55 silver badges"><span class="badge2"></span><span class="badgecount">55</span></span><span title="124 bronze badges"><span class="badge3"></span><span class="badgecount">124</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</div>
</td>
        </tr>


<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1120140" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-938051" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">3</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">I have looked at <code>boost::spirit</code> for parsing.  It is more for parsing grammars thank parsing a simple file format.  Someone on my team was trying to use it to parse XML and it was a pain to debug.  Stay away from <code>boost::spirit</code> if possible.</span> –&nbsp;<a href="http://stackoverflow.com/users/35577/chrish" title="1065 reputation" class="comment-user">chrish</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(938051, 0)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment938051_1120140"><span title="2009-07-13 19:30:27Z" class="relativetime-clean">Jul 13 '09 at 19:30</span></a></span></div></td>
    </tr>
            
    <tr id="comment-941839" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="hot">27</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">Sorry chrish, but that's terrible advice.  Spirit isn't always an appropriate solution but I've used it - and continue to use it - successfully in a number of projects.  Compared to similar tools (Antlr, Lex/yacc etc) it has significant advantages.  Now, for parsing CSV it's probably overkill...</span> –&nbsp;<a href="http://stackoverflow.com/users/7405/mattyt" title="2319 reputation" class="comment-user">MattyT</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(941839, 0)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment941839_1120140"><span title="2009-07-14 12:09:26Z" class="relativetime-clean">Jul 14 '09 at 12:09</span></a></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    
</td>
</tr>            </tbody></table>    
</div>


    


<div id="answers">

    <a name="tab-top"></a>
    <div id="answers-header">
        <div class="subheader answers-subheader">
            <h2>
                    16 Answers
            </h2>
            <div id="tabs">
                <a href="http://stackoverflow.com/questions/1120140/csv-parser-in-c?answertab=active#tab-top" title="Answers with the latest activity first">active</a>
<a href="http://stackoverflow.com/questions/1120140/csv-parser-in-c?answertab=oldest#tab-top" title="Answers in the order they were provided">oldest</a>
<a class="youarehere" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c?answertab=votes#tab-top" title="Answers with the highest score first">votes</a>

            </div>
        </div>    
    </div>    




  
<a name="1120224"></a>
<div id="answer-1120224" class="answer accepted-answer" data-answerid="1120224">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1120224">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">50</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

            <span class="vote-accepted-on load-accepted-answer-date" title="loading when this answer was accepted...">accepted</span>
 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>If you don't care about escaping comma and newline,<br>
AND you can't embed comma and newline in quotes (If you can't escape then...)<br>
then its only about three lines of code (OK 14 -&gt;But its only 15 to read the whole file).</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="pln">std</span><span class="pun">::</span><span class="typ">vector</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string</span><span class="pun">&gt;</span><span class="pln"> getNextLineAndSplitIntoTokens</span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">istream</span><span class="pun">&amp;</span><span class="pln"> str</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    std</span><span class="pun">::</span><span class="typ">vector</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string</span><span class="pun">&gt;</span><span class="pln">   result</span><span class="pun">;</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">string                line</span><span class="pun">;</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">getline</span><span class="pun">(</span><span class="pln">str</span><span class="pun">,</span><span class="pln">line</span><span class="pun">);</span><span class="pln">

    std</span><span class="pun">::</span><span class="pln">stringstream          lineStream</span><span class="pun">(</span><span class="pln">line</span><span class="pun">);</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">string                cell</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">while</span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">getline</span><span class="pun">(</span><span class="pln">lineStream</span><span class="pun">,</span><span class="pln">cell</span><span class="pun">,</span><span class="str">','</span><span class="pun">))</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        result</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">cell</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> result</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>

<p>I would just create a class representing a row.<br>
Then stream into that object:</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;iterator&gt;</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;iostream&gt;</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;fstream&gt;</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;sstream&gt;</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;vector&gt;</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;string&gt;</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CVSRow</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pun">:</span><span class="pln">
        std</span><span class="pun">::</span><span class="pln">string </span><span class="kwd">const</span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">[](</span><span class="pln">std</span><span class="pun">::</span><span class="typ">size_t</span><span class="pln"> index</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">const</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> m_data</span><span class="pun">[</span><span class="pln">index</span><span class="pun">];</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        std</span><span class="pun">::</span><span class="typ">size_t</span><span class="pln"> size</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">const</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> m_data</span><span class="pun">.</span><span class="pln">size</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> readNextRow</span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">istream</span><span class="pun">&amp;</span><span class="pln"> str</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            std</span><span class="pun">::</span><span class="pln">string         line</span><span class="pun">;</span><span class="pln">
            std</span><span class="pun">::</span><span class="pln">getline</span><span class="pun">(</span><span class="pln">str</span><span class="pun">,</span><span class="pln">line</span><span class="pun">);</span><span class="pln">

            std</span><span class="pun">::</span><span class="pln">stringstream   lineStream</span><span class="pun">(</span><span class="pln">line</span><span class="pun">);</span><span class="pln">
            std</span><span class="pun">::</span><span class="pln">string         cell</span><span class="pun">;</span><span class="pln">

            m_data</span><span class="pun">.</span><span class="pln">clear</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">while</span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">getline</span><span class="pun">(</span><span class="pln">lineStream</span><span class="pun">,</span><span class="pln">cell</span><span class="pun">,</span><span class="str">','</span><span class="pun">))</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                m_data</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">cell</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">private</span><span class="pun">:</span><span class="pln">
        std</span><span class="pun">::</span><span class="typ">vector</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string</span><span class="pun">&gt;</span><span class="pln">    m_data</span><span class="pun">;</span><span class="pln">
</span><span class="pun">};</span><span class="pln">

std</span><span class="pun">::</span><span class="pln">istream</span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">&gt;&gt;(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">istream</span><span class="pun">&amp;</span><span class="pln"> str</span><span class="pun">,</span><span class="typ">CVSRow</span><span class="pun">&amp;</span><span class="pln"> data</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    data</span><span class="pun">.</span><span class="pln">readNextRow</span><span class="pun">(</span><span class="pln">str</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> str</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">   
</span><span class="typ">int</span><span class="pln"> main</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">ifstream       file</span><span class="pun">(</span><span class="str">"plop.csv"</span><span class="pun">);</span><span class="pln">

    </span><span class="typ">CVSRow</span><span class="pln">              row</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">while</span><span class="pun">(</span><span class="pln">file </span><span class="pun">&gt;&gt;</span><span class="pln"> row</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        std</span><span class="pun">::</span><span class="pln">cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"4th Element("</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> row</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">")\n"</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>

<p>But with a little work we could technically create an iterator:</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="kwd">class</span><span class="pln"> </span><span class="typ">CVSIterator</span><span class="pln">
</span><span class="pun">{</span><span class="pln">   
    </span><span class="kwd">public</span><span class="pun">:</span><span class="pln">
        </span><span class="kwd">typedef</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">input_iterator_tag     iterator_category</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">typedef</span><span class="pln"> </span><span class="typ">CVSRow</span><span class="pln">                      value_type</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">typedef</span><span class="pln"> std</span><span class="pun">::</span><span class="typ">size_t</span><span class="pln">                 difference_type</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">typedef</span><span class="pln"> </span><span class="typ">CVSRow</span><span class="pun">*</span><span class="pln">                     pointer</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">typedef</span><span class="pln"> </span><span class="typ">CVSRow</span><span class="pun">&amp;</span><span class="pln">                     reference</span><span class="pun">;</span><span class="pln">

        </span><span class="typ">CVSIterator</span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">istream</span><span class="pun">&amp;</span><span class="pln"> str</span><span class="pun">)</span><span class="pln">  </span><span class="pun">:</span><span class="pln">m_str</span><span class="pun">(</span><span class="pln">str</span><span class="pun">.</span><span class="pln">good</span><span class="pun">()?&amp;</span><span class="pln">str</span><span class="pun">:</span><span class="pln">NULL</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">++(*</span><span class="kwd">this</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="typ">CVSIterator</span><span class="pun">()</span><span class="pln">                   </span><span class="pun">:</span><span class="pln">m_str</span><span class="pun">(</span><span class="pln">NULL</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">

        </span><span class="com">// Pre Increment</span><span class="pln">
        </span><span class="typ">CVSIterator</span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">++()</span><span class="pln">               </span><span class="pun">{</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">m_str</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">m_str</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> m_row</span><span class="pun">;</span><span class="pln">m_str </span><span class="pun">=</span><span class="pln"> m_str</span><span class="pun">-&gt;</span><span class="pln">good</span><span class="pun">()?</span><span class="pln">m_str</span><span class="pun">:</span><span class="pln">NULL</span><span class="pun">;}</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="kwd">this</span><span class="pun">;}</span><span class="pln">
        </span><span class="com">// Post increment</span><span class="pln">
        </span><span class="typ">CVSIterator</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">++(</span><span class="typ">int</span><span class="pun">)</span><span class="pln">             </span><span class="pun">{</span><span class="typ">CVSIterator</span><span class="pln">    tmp</span><span class="pun">(*</span><span class="kwd">this</span><span class="pun">);++(*</span><span class="kwd">this</span><span class="pun">);</span><span class="kwd">return</span><span class="pln"> tmp</span><span class="pun">;}</span><span class="pln">
        </span><span class="typ">CVSRow</span><span class="pln"> </span><span class="kwd">const</span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">*()</span><span class="pln">   </span><span class="kwd">const</span><span class="pln">       </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> m_row</span><span class="pun">;}</span><span class="pln">
        </span><span class="typ">CVSRow</span><span class="pln"> </span><span class="kwd">const</span><span class="pun">*</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">-&gt;()</span><span class="pln">  </span><span class="kwd">const</span><span class="pln">       </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">m_row</span><span class="pun">;}</span><span class="pln">

        </span><span class="kwd">bool</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">==(</span><span class="typ">CVSIterator</span><span class="pln"> </span><span class="kwd">const</span><span class="pun">&amp;</span><span class="pln"> rhs</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">((</span><span class="kwd">this</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">rhs</span><span class="pun">)</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="pun">((</span><span class="kwd">this</span><span class="pun">-&gt;</span><span class="pln">m_str </span><span class="pun">==</span><span class="pln"> NULL</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">rhs</span><span class="pun">.</span><span class="pln">m_str </span><span class="pun">==</span><span class="pln"> NULL</span><span class="pun">)));}</span><span class="pln">
        </span><span class="kwd">bool</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">!=(</span><span class="typ">CVSIterator</span><span class="pln"> </span><span class="kwd">const</span><span class="pun">&amp;</span><span class="pln"> rhs</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">!((*</span><span class="kwd">this</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> rhs</span><span class="pun">);}</span><span class="pln">
    </span><span class="kwd">private</span><span class="pun">:</span><span class="pln">
        std</span><span class="pun">::</span><span class="pln">istream</span><span class="pun">*</span><span class="pln">       m_str</span><span class="pun">;</span><span class="pln">
        </span><span class="typ">CVSRow</span><span class="pln">              m_row</span><span class="pun">;</span><span class="pln">
</span><span class="pun">};</span><span class="pln">


</span><span class="typ">int</span><span class="pln"> main</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">ifstream       file</span><span class="pun">(</span><span class="str">"plop.csv"</span><span class="pun">);</span><span class="pln">

    </span><span class="kwd">for</span><span class="pun">(</span><span class="typ">CVSIterator</span><span class="pln"> loop</span><span class="pun">(</span><span class="pln">file</span><span class="pun">);</span><span class="pln">loop </span><span class="pun">!=</span><span class="pln"> </span><span class="typ">CVSIterator</span><span class="pun">();++</span><span class="pln">loop</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        std</span><span class="pun">::</span><span class="pln">cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"4th Element("</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">loop</span><span class="pun">)[</span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">")\n"</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/1120224" title="short permalink to this answer" class="short-link" id="link-post-1120224">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1120224/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">


    <div class="user-info user-hover">
        <div class="user-action-time">
                            edited
                             <a href="http://stackoverflow.com/posts/1120224/revisions" title="show all edits to this post"><span title="2009-07-14 14:44:02Z" class="relativetime">Jul 14 '09 at 14:44</span></a>

        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/20481/plinth"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/dc41c338d8a89f8cec603f65f6fd0c89" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/20481/plinth">plinth</a><br>
            <span class="reputation-score" title="reputation score 20354" dir="ltr">20.4k</span><span title="2 gold badges"><span class="badge1"></span><span class="badgecount">2</span></span><span title="37 silver badges"><span class="badge2"></span><span class="badgecount">37</span></span><span title="67 bronze badges"><span class="badge3"></span><span class="badgecount">67</span></span>
        </div>
    </div>
    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info ">
        <div class="user-action-time">
                                    answered
 <span title="2009-07-13 15:37:44Z" class="relativetime">Jul 13 '09 at 15:37</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/14065/loki-astari"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/6cd8373fb8a3efe36369a0351726e7d7" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/14065/loki-astari">Loki Astari</a><br>
            <span class="reputation-score" title="reputation score 87912" dir="ltr">87.9k</span><span title="14 gold badges"><span class="badge1"></span><span class="badgecount">14</span></span><span title="118 silver badges"><span class="badge2"></span><span class="badgecount">118</span></span><span title="248 bronze badges"><span class="badge3"></span><span class="badgecount">248</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1120224" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-940121" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">1</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">Can somebody do two fixes above:  lineSteam instead of linestream.  Missing ")" on while.</span> –&nbsp;<a href="http://stackoverflow.com/users/125380/user1" title="5810 reputation" class="comment-user owner">User1</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(940121, 1120224)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment940121_1120224"><span title="2009-07-14 03:20:24Z" class="relativetime-clean">Jul 14 '09 at 3:20</span></a></span></div></td>
    </tr>
            
    <tr id="comment-940356" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">1</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">first() next(). What is this Java! Only Joking.</span> –&nbsp;<a href="http://stackoverflow.com/users/14065/loki-astari" title="87912 reputation" class="comment-user">Loki Astari</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(940356, 1120224)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment940356_1120224"><span title="2009-07-14 05:15:08Z" class="relativetime-clean">Jul 14 '09 at 5:15</span></a></span></div></td>
    </tr>
            
    <tr id="comment-2477715" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">1</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">or you could use some boost libraries to parse csv ... see below</span> –&nbsp;<a href="http://stackoverflow.com/users/45654/stefanb" title="19389 reputation" class="comment-user">stefanB</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(2477715, 1120224)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment2477715_1120224"><span title="2010-03-21 00:15:16Z" class="relativetime-clean">Mar 21 '10 at 0:15</span></a></span></div></td>
    </tr>
            
    <tr id="comment-9881997" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="warm">6</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">You mixed up CSV and CVS :-)</span> –&nbsp;<a href="http://stackoverflow.com/users/381281/hfs" title="614 reputation" class="comment-user">hfs</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(9881997, 1120224)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment9881997_1120224"><span title="2011-11-09 14:09:52Z" class="relativetime-clean">Nov 9 '11 at 14:09</span></a></span></div></td>
    </tr>
            
    <tr id="comment-11042955" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">3</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">@DarthVader: I think it is silly to make broad generalizations. The code above works correctly so I can actually see anything wrong with it. But if you have any specific comment on the above I will definitely consider in in this context. But I can see how you can come to that conclusion by mindlessly following a set of generalized rules for C# and applying it to another language.</span> –&nbsp;<a href="http://stackoverflow.com/users/14065/loki-astari" title="87912 reputation" class="comment-user">Loki Astari</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(11042955, 1120224)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment11042955_1120224"><span title="2012-01-12 21:29:40Z" class="relativetime-clean">Jan 12 '12 at 21:29</span></a></span><span class="edited-yes" title="this comment was edited 2 times"></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    <a id="comments-link-1120224" class="comments-link" data-comments-count="7" title="expand to show all comments on this post">show <b>7</b> more comments</a>
</td>
</tr>
   
    
    </tbody></table>
</div>
        <div class="everyonelovesstackoverflow" id="adzerk3">
        </div>



  
<a name="1475104"></a>
<div id="answer-1475104" class="answer" data-answerid="1475104">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1475104">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">21</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>The <a href="http://www.partow.net/programming/strtk/index.html" rel="nofollow">C++ String Toolkit Library (StrTk)</a> has a token grid class that allows you to load data either from <b>text files, strings or char buffers</b>, and to parse/process them in a row-column fashion.</p>

<p>You can specify the row delimiters and column delimiters or just use the defaults.</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="kwd">void</span><span class="pln"> foo</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   std</span><span class="pun">::</span><span class="pln">string data </span><span class="pun">=</span><span class="pln"> </span><span class="str">"1,2,3,4,5\n"</span><span class="pln">
                      </span><span class="str">"0,2,4,6,8\n"</span><span class="pln">
                      </span><span class="str">"1,3,5,7,9\n"</span><span class="pun">;</span><span class="pln">

   strtk</span><span class="pun">::</span><span class="pln">token_grid grid</span><span class="pun">(</span><span class="pln">data</span><span class="pun">,</span><span class="pln">data</span><span class="pun">.</span><span class="pln">size</span><span class="pun">(),</span><span class="str">","</span><span class="pun">);</span><span class="pln">

   </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="typ">size_t</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> grid</span><span class="pun">.</span><span class="pln">row_count</span><span class="pun">();</span><span class="pln"> </span><span class="pun">++</span><span class="pln">i</span><span class="pun">)</span><span class="pln">
   </span><span class="pun">{</span><span class="pln">
      strtk</span><span class="pun">::</span><span class="pln">token_grid</span><span class="pun">::</span><span class="pln">row_type r </span><span class="pun">=</span><span class="pln"> grid</span><span class="pun">.</span><span class="pln">row</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
      </span><span class="kwd">for</span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="typ">size_t</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> r</span><span class="pun">.</span><span class="pln">size</span><span class="pun">();</span><span class="pln"> </span><span class="pun">++</span><span class="pln">j</span><span class="pun">)</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
         std</span><span class="pun">::</span><span class="pln">cout </span><span class="pun">&lt;&lt;</span><span class="pln"> r</span><span class="pun">.</span><span class="pln">get</span><span class="str">&lt;int&gt;</span><span class="pun">(</span><span class="pln">j</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"\t"</span><span class="pun">;</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
      std</span><span class="pun">::</span><span class="pln">cout </span><span class="pun">&lt;&lt;</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">endl</span><span class="pun">;</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
   std</span><span class="pun">::</span><span class="pln">cout </span><span class="pun">&lt;&lt;</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">endl</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>

<p>More examples can be found <a href="http://www.codeproject.com/KB/recipes/Tokenizer.aspx" rel="nofollow">Here</a></p>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/1475104" title="short permalink to this answer" class="short-link" id="link-post-1475104">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1475104/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">


    <div class="user-info ">
        <div class="user-action-time">
                            edited
                             <a href="http://stackoverflow.com/posts/1475104/revisions" title="show all edits to this post"><span title="2010-12-25 21:28:40Z" class="relativetime">Dec 25 '10 at 21:28</span></a>

        </div>
        <div class="user-gravatar32">
            
        </div>
        <div class="user-details">
            <br>
            
        </div>
    </div>
    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info ">
        <div class="user-action-time">
                                    answered
 <span title="2009-09-25 02:15:25Z" class="relativetime">Sep 25 '09 at 2:15</span>
        </div>
        <div class="user-gravatar32">
            <span class="anonymous-gravatar"></span>
        </div>
        <div class="user-details">
            Matthieu N.<br>
            
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1475104" class="comments dno">
        <table>
        <tbody>
        
            <tr><td></td><td></td></tr>
        
        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="1122720"></a>
<div id="answer-1122720" class="answer" data-answerid="1122720">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1122720">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">19</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>Solution using Boost Tokenizer:</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="pln">std</span><span class="pun">::</span><span class="typ">vector</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string</span><span class="pun">&gt;</span><span class="pln"> vec</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">using</span><span class="pln"> </span><span class="kwd">namespace</span><span class="pln"> boost</span><span class="pun">;</span><span class="pln">
tokenizer</span><span class="pun">&lt;</span><span class="pln">escaped_list_separator</span><span class="str">&lt;char&gt;</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> tk</span><span class="pun">(</span><span class="pln">
   line</span><span class="pun">,</span><span class="pln"> escaped_list_separator</span><span class="str">&lt;char&gt;</span><span class="pun">(</span><span class="str">'\\'</span><span class="pun">,</span><span class="pln"> </span><span class="str">','</span><span class="pun">,</span><span class="pln"> </span><span class="str">'\"'</span><span class="pun">));</span><span class="pln">
</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="pln">tokenizer</span><span class="pun">&lt;</span><span class="pln">escaped_list_separator</span><span class="str">&lt;char&gt;</span><span class="pln"> </span><span class="pun">&gt;::</span><span class="typ">iterator</span><span class="pln"> i</span><span class="pun">(</span><span class="pln">tk</span><span class="pun">.</span><span class="pln">begin</span><span class="pun">());</span><span class="pln">
   i</span><span class="pun">!=</span><span class="pln">tk</span><span class="pun">.</span><span class="pln">end</span><span class="pun">();++</span><span class="pln">i</span><span class="pun">)</span><span class="pln"> 
</span><span class="pun">{</span><span class="pln">
   vec</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(*</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/1122720" title="short permalink to this answer" class="short-link" id="link-post-1122720">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1122720/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">


    <div class="user-info ">
        <div class="user-action-time">
                            edited
                             <a href="http://stackoverflow.com/posts/1122720/revisions" title="show all edits to this post"><span title="2009-07-14 05:57:34Z" class="relativetime">Jul 14 '09 at 5:57</span></a>

        </div>
        <div class="user-gravatar32">
            
        </div>
        <div class="user-details">
            <br>
            
        </div>
    </div>
    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info ">
        <div class="user-action-time">
                                    answered
 <span title="2009-07-13 23:41:01Z" class="relativetime">Jul 13 '09 at 23:41</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/137751/dtw"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/f0db5b973867e49a18d51317b6b6ca19" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/137751/dtw">dtw</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">741</span><span title="3 silver badges"><span class="badge2"></span><span class="badgecount">3</span></span><span title="9 bronze badges"><span class="badge3"></span><span class="badgecount">9</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1122720" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-2647582" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">4</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">The boost tokenizer doesn't fully support the complete CSV standard, but there are some quick workarounds. See <a href="http://stackoverflow.com/questions/1120140/csv-parser-in-c/1595366#1595366" title="csv parser in c">stackoverflow.com/questions/1120140/csv-parser-in-c/…</a></span> –&nbsp;<a href="http://stackoverflow.com/users/193178/rolf-kristensen" title="853 reputation" class="comment-user">Rolf Kristensen</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(2647582, 1122720)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment2647582_1122720"><span title="2010-04-13 23:03:15Z" class="relativetime-clean">Apr 13 '10 at 23:03</span></a></span></div></td>
    </tr>
            
    <tr id="comment-6667997" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">2</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">Do you have to have the whole boost library on your machine, or can you just use a subset of their code to do this? 256mb seems like a lot for CSV parsing..</span> –&nbsp;<a href="http://stackoverflow.com/users/289182/npike" title="2493 reputation" class="comment-user">NPike</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(6667997, 1122720)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment6667997_1122720"><span title="2011-04-27 23:28:02Z" class="relativetime-clean">Apr 27 '11 at 23:28</span></a></span></div></td>
    </tr>
            
    <tr id="comment-7097183" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">3</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">@NPike : You can use the <a href="http://www.boost.org/doc/libs/release/tools/bcp/index.html" rel="nofollow">bcp</a> utility that comes with boost to extract only the headers you actually need.</span> –&nbsp;<a href="http://stackoverflow.com/users/636019/ildjarn" title="30881 reputation" class="comment-user">ildjarn</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(7097183, 1122720)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment7097183_1122720"><span title="2011-05-24 23:06:11Z" class="relativetime-clean">May 24 '11 at 23:06</span></a></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="1764367"></a>
<div id="answer-1764367" class="answer" data-answerid="1764367">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1764367">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">19</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>It is not overkill to use Spirit for parsing CSVs. Spirit is well suited for micro-parsing tasks. For instance, with Spirit 2.1, it is as easy as:</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="kwd">bool</span><span class="pln"> r </span><span class="pun">=</span><span class="pln"> phrase_parse</span><span class="pun">(</span><span class="pln">first</span><span class="pun">,</span><span class="pln"> last</span><span class="pun">,</span><span class="pln">

    </span><span class="com">//  Begin grammar</span><span class="pln">
    </span><span class="pun">(</span><span class="pln">
        double_ </span><span class="pun">%</span><span class="pln"> </span><span class="str">','</span><span class="pln">
    </span><span class="pun">)</span><span class="pln">
    </span><span class="pun">,</span><span class="pln">
    </span><span class="com">//  End grammar</span><span class="pln">

    space</span><span class="pun">,</span><span class="pln"> v</span><span class="pun">);</span></code></pre>

<p>The vector, v, gets stuffed with the values. <a href="http://www.boost.org/doc/libs/1_41_0/libs/spirit/doc/html/spirit/qi/tutorials.html">There is a series of tutorials</a> touching on this in the new Spirit 2.1 docs that's just been released with Boost 1.41.</p>

<p>The tutorial progresses from simple to complex. The CSV parsers are presented somewhere in the middle and touches on various techniques in using Spirit. The generated code is as tight as hand written code. Check out the assembler generated!</p>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/1764367" title="short permalink to this answer" class="short-link" id="link-post-1764367">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1764367/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">


    <div class="user-info user-hover">
        <div class="user-action-time">
                            edited
                             <a href="http://stackoverflow.com/posts/1764367/revisions" title="show all edits to this post"><span title="2011-02-28 10:04:24Z" class="relativetime">Feb 28 '11 at 10:04</span></a>

        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/27596/foraidt"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/66e1ce73230c4826633beaeef2951c88" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/27596/foraidt">foraidt</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">1,962</span><span title="14 silver badges"><span class="badge2"></span><span class="badgecount">14</span></span><span title="39 bronze badges"><span class="badge3"></span><span class="badgecount">39</span></span>
        </div>
    </div>
    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info ">
        <div class="user-action-time">
                                    answered
 <span title="2009-11-19 16:00:52Z" class="relativetime">Nov 19 '09 at 16:00</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/1646593/joel-de-guzman"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/b40a53e56b1a1ed8ad87c31c70c8a5c6" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/1646593/joel-de-guzman">Joel de Guzman</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">520</span><span title="6 silver badges"><span class="badge2"></span><span class="badgecount">6</span></span><span title="2 bronze badges"><span class="badge3"></span><span class="badgecount">2</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1764367" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-18755196" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">3</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">Actually it is overkill, the compilation time hit is enormous and makes using Spirit for simple "micro-parsing tasks" unreasonable.</span> –&nbsp;<a href="http://stackoverflow.com/users/765234/gerdiner" title="61 reputation" class="comment-user">Gerdiner</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(18755196, 1764367)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment18755196_1764367"><span title="2012-12-02 00:37:45Z" class="relativetime-clean">Dec 2 '12 at 0:37</span></a></span></div></td>
    </tr>
            
    <tr id="comment-18755225" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">2</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">Also I'd like to point out that the code above does not parse CSV, it just parses a range of the type of the vector delimited by commas. It doesn't handle quotes, varying types of columns etc. In short 19 votes for something that does answer the question at all seems a bit suspicious to me.</span> –&nbsp;<a href="http://stackoverflow.com/users/765234/gerdiner" title="61 reputation" class="comment-user">Gerdiner</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(18755225, 1764367)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment18755225_1764367"><span title="2012-12-02 00:40:04Z" class="relativetime-clean">Dec 2 '12 at 0:40</span></a></span></div></td>
    </tr>
            
    <tr id="comment-18884476" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">1</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">@Gerdiner Nonsense. The compilation time hit for small parsers isn’t that big, but it’s also irrelevant because you stuff the code into its own compilation unit and compile it <i>once</i>. Then you only need to link it and that’s as efficient as it gets. And as for your other comment, there are as many dialects of CSV as there are processors for it. This one certainly isn’t a very useful dialect but it can be trivially extended to handle quoted values.</span> –&nbsp;<a href="http://stackoverflow.com/users/1968/konrad-rudolph" title="167881 reputation" class="comment-user">Konrad Rudolph</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(18884476, 1764367)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment18884476_1764367"><span title="2012-12-06 12:04:49Z" class="relativetime-clean">Dec 6 '12 at 12:04</span></a></span><span class="edited-yes" title="this comment was edited"></span></div></td>
    </tr>
            
    <tr id="comment-19809513" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">2</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">@konrad: Simply including "#include &lt;boost/spirit/include/qi.hpp&gt;" in an empty file with only a main and nothing else takes 9.7sec with MSVC 2012 on a corei7 running at 2.ghz. It's needless bloat. The accepted answer compiles in under 2secs on the same machine, I'd hate to imagine how long the 'proper' Boost.Spirit example would take to compile.</span> –&nbsp;<a href="http://stackoverflow.com/users/765234/gerdiner" title="61 reputation" class="comment-user">Gerdiner</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(19809513, 1764367)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment19809513_1764367"><span title="2013-01-11 00:31:15Z" class="relativetime-clean">Jan 11 at 0:31</span></a></span></div></td>
    </tr>
            
    <tr id="comment-19818217" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">@Gerdiner It takes substantially less for me (~4sec) but like I said, that’s quite irrelevant since you only need to compile that TU once. The time you save implementing the parser easily offsets the compilation cost here. As for “proper” Boost.Sprit grammars: a big grammar can take several minutes to compile. But once again: that cost is offset easily by the ease of writing the parser, and this is not a continuous cost since you don’t need to recompile the parser every time you recompile the client code.</span> –&nbsp;<a href="http://stackoverflow.com/users/1968/konrad-rudolph" title="167881 reputation" class="comment-user">Konrad Rudolph</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(19818217, 1764367)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment19818217_1764367"><span title="2013-01-11 09:34:26Z" class="relativetime-clean">Jan 11 at 9:34</span></a></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="2322735"></a>
<div id="answer-2322735" class="answer" data-answerid="2322735">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="2322735">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">14</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p><strong>You can use Boost Tokenizer with escaped_list_separator.</strong></p>

<blockquote>
  <p><strong>escaped_list_separator</strong> parses a superset of the csv. <a href="http://www.boost.org/doc/libs/1_42_0/libs/tokenizer/escaped_list_separator.htm">Boost::tokenizer</a></p>
</blockquote>

<p>This only uses Boost tokenizer header files, no linking to boost libraries required.</p>

<p>Here is an example, (see <a href="http://mybyteofcode.blogspot.com/2010/02/parse-csv-file-with-boost-tokenizer-in.html">Parse CSV File With Boost Tokenizer In C++</a> for details or <code>Boost::tokenizer</code> ):</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;iostream&gt;</span><span class="pln">     </span><span class="com">// cout, endl</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;fstream&gt;</span><span class="pln">      </span><span class="com">// fstream</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;vector&gt;</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;string&gt;</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;algorithm&gt;</span><span class="pln">    </span><span class="com">// copy</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;iterator&gt;</span><span class="pln">     </span><span class="com">// ostream_operator</span><span class="pln">
</span><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;boost/tokenizer.hpp&gt;</span><span class="pln">

</span><span class="typ">int</span><span class="pln"> main</span><span class="pun">()</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="kwd">namespace</span><span class="pln"> std</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">using</span><span class="pln"> </span><span class="kwd">namespace</span><span class="pln"> boost</span><span class="pun">;</span><span class="pln">
    string data</span><span class="pun">(</span><span class="str">"data.csv"</span><span class="pun">);</span><span class="pln">

    ifstream in</span><span class="pun">(</span><span class="pln">data</span><span class="pun">.</span><span class="pln">c_str</span><span class="pun">());</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">in</span><span class="pun">.</span><span class="pln">is_open</span><span class="pun">())</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">typedef</span><span class="pln"> tokenizer</span><span class="pun">&lt;</span><span class="pln"> escaped_list_separator</span><span class="str">&lt;char&gt;</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Tokenizer</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">vector</span><span class="pun">&lt;</span><span class="pln"> string </span><span class="pun">&gt;</span><span class="pln"> vec</span><span class="pun">;</span><span class="pln">
    string line</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">getline</span><span class="pun">(</span><span class="pln">in</span><span class="pun">,</span><span class="pln">line</span><span class="pun">))</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Tokenizer</span><span class="pln"> tok</span><span class="pun">(</span><span class="pln">line</span><span class="pun">);</span><span class="pln">
        vec</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">(</span><span class="pln">tok</span><span class="pun">.</span><span class="pln">begin</span><span class="pun">(),</span><span class="pln">tok</span><span class="pun">.</span><span class="pln">end</span><span class="pun">());</span><span class="pln">

        </span><span class="com">// vector now contains strings from one row, output to cout here</span><span class="pln">
        copy</span><span class="pun">(</span><span class="pln">vec</span><span class="pun">.</span><span class="pln">begin</span><span class="pun">(),</span><span class="pln"> vec</span><span class="pun">.</span><span class="pln">end</span><span class="pun">(),</span><span class="pln"> ostream_iterator</span><span class="str">&lt;string&gt;</span><span class="pun">(</span><span class="pln">cout</span><span class="pun">,</span><span class="pln"> </span><span class="str">"|"</span><span class="pun">));</span><span class="pln">

        cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"\n----------------------"</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> endl</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/2322735" title="short permalink to this answer" class="short-link" id="link-post-2322735">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/2322735/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info user-hover">
        <div class="user-action-time">
                                    answered
 <span title="2010-02-24 00:02:34Z" class="relativetime">Feb 24 '10 at 0:02</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/45654/stefanb"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/074cb23f424613c8d5dbc3eedc5d3dbf" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/45654/stefanb">stefanB</a><br>
            <span class="reputation-score" title="reputation score 19389" dir="ltr">19.4k</span><span title="8 gold badges"><span class="badge1"></span><span class="badgecount">8</span></span><span title="45 silver badges"><span class="badge2"></span><span class="badgecount">45</span></span><span title="76 bronze badges"><span class="badge3"></span><span class="badgecount">76</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-2322735" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-5152775" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">And if you want to be able to parse embedded new lines <a href="http://mybyteofcode.blogspot.com/2010/11/parse-csv-file-with-embedded-new-lines.html" rel="nofollow">mybyteofcode.blogspot.com/2010/11/…</a>.</span> –&nbsp;<a href="http://stackoverflow.com/users/45654/stefanb" title="19389 reputation" class="comment-user">stefanB</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(5152775, 2322735)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment5152775_2322735"><span title="2011-01-12 22:35:23Z" class="relativetime-clean">Jan 12 '11 at 22:35</span></a></span></div></td>
    </tr>
            
    <tr id="comment-14737600" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">While this technique works, I have found it to have very poor performance. Parsing a 90000 line CSV file with ten fields per line takes around 8 seconds on my 2 GHz Xeon. The Python Standard Library csv module parses the same file in about 0.3 seconds.</span> –&nbsp;<a href="http://stackoverflow.com/users/107907/rob-smallshire" title="342 reputation" class="comment-user">Rob Smallshire</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(14737600, 2322735)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment14737600_2322735"><span title="2012-06-27 07:59:23Z" class="relativetime-clean">Jun 27 '12 at 7:59</span></a></span><span class="edited-yes" title="this comment was edited"></span></div></td>
    </tr>
            
    <tr id="comment-15103816" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">@Rob that's interesting - what does the Python csv do differently?</span> –&nbsp;<a href="http://stackoverflow.com/users/339843/tofutim" title="2974 reputation" class="comment-user">tofutim</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(15103816, 2322735)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment15103816_2322735"><span title="2012-07-12 05:48:45Z" class="relativetime-clean">Jul 12 '12 at 5:48</span></a></span></div></td>
    </tr>
            
    <tr id="comment-15187859" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">@RobSmallshire it's a simple example code not a high performance one. This code makes copies of all the fields per line. For higher performance you would use different options and return just references to fields in buffer instead of making copies.</span> –&nbsp;<a href="http://stackoverflow.com/users/45654/stefanb" title="19389 reputation" class="comment-user">stefanB</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(15187859, 2322735)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment15187859_2322735"><span title="2012-07-16 00:43:41Z" class="relativetime-clean">Jul 16 '12 at 0:43</span></a></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="1595366"></a>
<div id="answer-1595366" class="answer" data-answerid="1595366">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1595366">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">8</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>When using the Boost Tokenizer escaped_list_separator for CSV files, then one should be aware of the following:</p>

<ol>
<li>It requires an escape-character (default back-slash - \)</li>
<li>It requires a splitter/seperator-character (default comma - ,)</li>
<li>It requires an quote-character (default quote - ")</li>
</ol>

<p>The CSV format specified by wiki states that data fields can contain separators in quotes (supported):</p>

<blockquote>
  <p>1997,Ford,E350,"Super, luxurious truck"</p>
</blockquote>

<p>The CSV format specified by wiki states that single quotes should be handled with double-quotes (escaped_list_separator will strip away all quote characters):</p>

<blockquote>
  <p>1997,Ford,E350,"Super ""luxurious"" truck"</p>
</blockquote>

<p>The CSV format doesn't specify that any back-slash characters should be stripped away (escaped_list_separator will strip away all escape characters).</p>

<p>A possible work-around to fix the default behavior of the boost escaped_list_separator:</p>

<ol>
<li>First replace all back-slash characters (\) with two back-slash characters (\\) so they are not stripped away.</li>
<li>Secondly replace all double-quotes ("") with a single back-slash character and a quote (\")</li>
</ol>

<p>This work-around has the side-effect that empty data-fields that are represented by a double-quote, will be transformed into a single-quote-token. When iterating through the tokens, then one must check if the token is a single-quote, and treat it like an empty string.</p>

<p>Not pretty but it works, as long there are not newlines within the quotes.</p>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/1595366" title="short permalink to this answer" class="short-link" id="link-post-1595366">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1595366/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">


    <div class="user-info ">
        <div class="user-action-time">
                            edited
                             <a href="http://stackoverflow.com/posts/1595366/revisions" title="show all edits to this post"><span title="2011-05-24 22:58:04Z" class="relativetime">May 24 '11 at 22:58</span></a>

        </div>
        <div class="user-gravatar32">
            
        </div>
        <div class="user-details">
            <br>
            
        </div>
    </div>
    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info ">
        <div class="user-action-time">
                                    answered
 <span title="2009-10-20 15:15:02Z" class="relativetime">Oct 20 '09 at 15:15</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/193178/rolf-kristensen"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/e896e0dfc3e8f02c27c1f97805cd52ff" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/193178/rolf-kristensen">Rolf Kristensen</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">853</span><span title="7 silver badges"><span class="badge2"></span><span class="badgecount">7</span></span><span title="8 bronze badges"><span class="badge3"></span><span class="badgecount">8</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1595366" class="comments dno">
        <table>
        <tbody>
        
            <tr><td></td><td></td></tr>
        
        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="2481126"></a>
<div id="answer-2481126" class="answer" data-answerid="2481126">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="2481126">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">6</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>If you <strong>DO</strong> care about parsing CSV correctly, this will do it...relatively slowly as it works one char at a time.</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">ParseCSV</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> string</span><span class="pun">&amp;</span><span class="pln"> csvSource</span><span class="pun">,</span><span class="pln"> </span><span class="typ">vector</span><span class="pun">&lt;</span><span class="typ">vector</span><span class="str">&lt;string&gt;</span><span class="pln"> </span><span class="pun">&gt;&amp;</span><span class="pln"> lines</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
       </span><span class="kwd">bool</span><span class="pln"> inQuote</span><span class="pun">(</span><span class="kwd">false</span><span class="pun">);</span><span class="pln">
       </span><span class="kwd">bool</span><span class="pln"> newLine</span><span class="pun">(</span><span class="kwd">false</span><span class="pun">);</span><span class="pln">
       string field</span><span class="pun">;</span><span class="pln">
       lines</span><span class="pun">.</span><span class="pln">clear</span><span class="pun">();</span><span class="pln">
       </span><span class="typ">vector</span><span class="str">&lt;string&gt;</span><span class="pln"> line</span><span class="pun">;</span><span class="pln">

       string</span><span class="pun">::</span><span class="typ">const_iterator</span><span class="pln"> aChar </span><span class="pun">=</span><span class="pln"> csvSource</span><span class="pun">.</span><span class="pln">begin</span><span class="pun">();</span><span class="pln">
       </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">aChar </span><span class="pun">!=</span><span class="pln"> csvSource</span><span class="pun">.</span><span class="pln">end</span><span class="pun">())</span><span class="pln">
       </span><span class="pun">{</span><span class="pln">
          </span><span class="kwd">switch</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">aChar</span><span class="pun">)</span><span class="pln">
          </span><span class="pun">{</span><span class="pln">
          </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'"'</span><span class="pun">:</span><span class="pln">
             newLine </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
             inQuote </span><span class="pun">=</span><span class="pln"> </span><span class="pun">!</span><span class="pln">inQuote</span><span class="pun">;</span><span class="pln">
             </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">

          </span><span class="kwd">case</span><span class="pln"> </span><span class="str">','</span><span class="pun">:</span><span class="pln">
             newLine </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
             </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">inQuote </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span><span class="pln">
             </span><span class="pun">{</span><span class="pln">
                field </span><span class="pun">+=</span><span class="pln"> </span><span class="pun">*</span><span class="pln">aChar</span><span class="pun">;</span><span class="pln">
             </span><span class="pun">}</span><span class="pln">
             </span><span class="kwd">else</span><span class="pln">
             </span><span class="pun">{</span><span class="pln">
                line</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">field</span><span class="pun">);</span><span class="pln">
                field</span><span class="pun">.</span><span class="pln">clear</span><span class="pun">();</span><span class="pln">
             </span><span class="pun">}</span><span class="pln">
             </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">

          </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'\n'</span><span class="pun">:</span><span class="pln">
          </span><span class="kwd">case</span><span class="pln"> </span><span class="str">'\r'</span><span class="pun">:</span><span class="pln">
             </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">inQuote </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span><span class="pln">
             </span><span class="pun">{</span><span class="pln">
                field </span><span class="pun">+=</span><span class="pln"> </span><span class="pun">*</span><span class="pln">aChar</span><span class="pun">;</span><span class="pln">
             </span><span class="pun">}</span><span class="pln">
             </span><span class="kwd">else</span><span class="pln">
             </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">newLine </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                   line</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">field</span><span class="pun">);</span><span class="pln">
                   lines</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">line</span><span class="pun">);</span><span class="pln">
                   field</span><span class="pun">.</span><span class="pln">clear</span><span class="pun">();</span><span class="pln">
                   line</span><span class="pun">.</span><span class="pln">clear</span><span class="pun">();</span><span class="pln">
                   newLine </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">
             </span><span class="pun">}</span><span class="pln">
             </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">

          </span><span class="kwd">default</span><span class="pun">:</span><span class="pln">
             newLine </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
             field</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(*</span><span class="pln">aChar</span><span class="pun">);</span><span class="pln">
             </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
          </span><span class="pun">}</span><span class="pln">

          aChar</span><span class="pun">++;</span><span class="pln">
       </span><span class="pun">}</span><span class="pln">

       </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">field</span><span class="pun">.</span><span class="pln">size</span><span class="pun">())</span><span class="pln">
          line</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">field</span><span class="pun">);</span><span class="pln">

       </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">line</span><span class="pun">.</span><span class="pln">size</span><span class="pun">())</span><span class="pln">
          lines</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">line</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span></code></pre>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/2481126" title="short permalink to this answer" class="short-link" id="link-post-2481126">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/2481126/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">


    <div class="user-info user-hover">
        <div class="user-action-time">
                            edited
                             <a href="http://stackoverflow.com/posts/2481126/revisions" title="show all edits to this post"><span title="2011-12-04 02:54:51Z" class="relativetime">Dec 4 '11 at 2:54</span></a>

        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/504239/unixman83"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/3735d09bdf26f416ac0ae3cd6c634bbb" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/504239/unixman83">unixman83</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">1,846</span><span title="7 silver badges"><span class="badge2"></span><span class="badgecount">7</span></span><span title="29 bronze badges"><span class="badge3"></span><span class="badgecount">29</span></span>
        </div>
    </div>
    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info ">
        <div class="user-action-time">
                                    answered
 <span title="2010-03-19 23:18:07Z" class="relativetime">Mar 19 '10 at 23:18</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/297777/michael"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/7e0fab7e64e2e2c5297e1d1865e206e4" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/297777/michael">Michael</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">159</span><span title="1 silver badge"><span class="badge2"></span><span class="badgecount">1</span></span><span title="4 bronze badges"><span class="badge3"></span><span class="badgecount">4</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-2481126" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-7153670" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">1</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">Seems the code is missing a line where lastCharWasAQuote is set to true.</span> –&nbsp;<a href="http://stackoverflow.com/users/193178/rolf-kristensen" title="853 reputation" class="comment-user">Rolf Kristensen</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(7153670, 2481126)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment7153670_2481126"><span title="2011-05-27 20:57:45Z" class="relativetime-clean">May 27 '11 at 20:57</span></a></span></div></td>
    </tr>
            
    <tr id="comment-10332151" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">@Rolf I fixed the bugs with the code, hopefully it passes review.</span> –&nbsp;<a href="http://stackoverflow.com/users/504239/unixman83" title="1846 reputation" class="comment-user">unixman83</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(10332151, 2481126)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment10332151_2481126"><span title="2011-12-04 02:36:52Z" class="relativetime-clean">Dec 4 '11 at 2:36</span></a></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="1120165"></a>
<div id="answer-1120165" class="answer" data-answerid="1120165">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1120165">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">5</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>You might want to look at my FOSS project <a href="http://code.google.com/p/csvfix/" rel="nofollow">CSVfix</a>, which is a CSV stream editor written in C++. The CSV parser is no prize, but does the job and the whole package may do what you need without you writing any code.</p>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/1120165" title="short permalink to this answer" class="short-link" id="link-post-1120165">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1120165/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info ">
        <div class="user-action-time">
                                    answered
 <span title="2009-07-13 15:29:15Z" class="relativetime">Jul 13 '09 at 15:29</span>
        </div>
        <div class="user-gravatar32">
            <span class="anonymous-gravatar"></span>
        </div>
        <div class="user-details">
            anon<br>
            
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1120165" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-936502" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">Seems great ... What about the status beta / production ?</span> –&nbsp;<a href="http://stackoverflow.com/users/135549/neuro" title="4631 reputation" class="comment-user">neuro</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(936502, 1120165)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment936502_1120165"><span title="2009-07-13 15:30:57Z" class="relativetime-clean">Jul 13 '09 at 15:30</span></a></span></div></td>
    </tr>
            
    <tr id="comment-936535" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">The status is "in development", as suggested by the version numbers. I really need more feed back from users before going to version 1.0. Plus I have a couple more features I want to add, to do with XML production from CSV.</span> –&nbsp;<span class="comment-user">anon</span> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(936535, 1120165)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment936535_1120165"><span title="2009-07-13 15:36:35Z" class="relativetime-clean">Jul 13 '09 at 15:36</span></a></span></div></td>
    </tr>
            
    <tr id="comment-936581" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">Bookmarking it, and will give it a try next time I have to deal with those wonderful standard CSV files ...</span> –&nbsp;<a href="http://stackoverflow.com/users/135549/neuro" title="4631 reputation" class="comment-user">neuro</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(936581, 1120165)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment936581_1120165"><span title="2009-07-13 15:44:00Z" class="relativetime-clean">Jul 13 '09 at 15:44</span></a></span></div></td>
    </tr>
            
    <tr id="comment-1324945" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">+1 I found a project I can learn from :)</span> –&nbsp;<a href="http://stackoverflow.com/users/127893/arak" title="30748 reputation" class="comment-user">AraK</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(1324945, 1120165)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment1324945_1120165"><span title="2009-09-25 02:27:47Z" class="relativetime-clean">Sep 25 '09 at 2:27</span></a></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="1120239"></a>
<div id="answer-1120239" class="answer" data-answerid="1120239">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1120239">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">4</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>well if you need only simple CSV parsing, Neil Butterworth libs might be overkill in your case, you can just use the <code>istream&amp; getline (char* s, streamsize n, char delim );</code>. It will only handle simple cases, but it can be enough as a starting point ...</p>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/1120239" title="short permalink to this answer" class="short-link" id="link-post-1120239">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1120239/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info user-hover">
        <div class="user-action-time">
                                    answered
 <span title="2009-07-13 15:39:28Z" class="relativetime">Jul 13 '09 at 15:39</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/135549/neuro"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/a8e6d5160367674cd2ba06cf41516c39" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/135549/neuro">neuro</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">4,631</span><span title="1 gold badge"><span class="badge1"></span><span class="badgecount">1</span></span><span title="8 silver badges"><span class="badge2"></span><span class="badgecount">8</span></span><span title="23 bronze badges"><span class="badge3"></span><span class="badgecount">23</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1120239" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-936555" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">@Martin: arghhh not fast enough :-)</span> –&nbsp;<a href="http://stackoverflow.com/users/135549/neuro" title="4631 reputation" class="comment-user">neuro</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(936555, 1120239)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment936555_1120239"><span title="2009-07-13 15:40:10Z" class="relativetime-clean">Jul 13 '09 at 15:40</span></a></span></div></td>
    </tr>
            
    <tr id="comment-1400778" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">/me really hate downvotes without comment ...</span> –&nbsp;<a href="http://stackoverflow.com/users/135549/neuro" title="4631 reputation" class="comment-user">neuro</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(1400778, 1120239)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment1400778_1120239"><span title="2009-10-09 14:28:57Z" class="relativetime-clean">Oct 9 '09 at 14:28</span></a></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="1121067"></a>
<div id="answer-1121067" class="answer" data-answerid="1121067">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1121067">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">3</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>The <a href="http://www.boost.org/doc/libs/1_37_0/libs/tokenizer/index.html" rel="nofollow">Boost Tokenizer</a> documentation specifically mentions parsing CSV files as one of the examples.  It still might be overkill for what you need, but less so than writing a full-blown LL parser.</p>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/1121067" title="short permalink to this answer" class="short-link" id="link-post-1121067">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1121067/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info user-hover">
        <div class="user-action-time">
                                    answered
 <span title="2009-07-13 17:58:48Z" class="relativetime">Jul 13 '09 at 17:58</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/46821/michael-kristofik"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/4bfb433d859e35f8154943ddc61c73f6" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/46821/michael-kristofik">Michael Kristofik</a><br>
            <span class="reputation-score" title="reputation score 12176" dir="ltr">12.2k</span><span title="2 gold badges"><span class="badge1"></span><span class="badgecount">2</span></span><span title="27 silver badges"><span class="badge2"></span><span class="badgecount">27</span></span><span title="71 bronze badges"><span class="badge3"></span><span class="badgecount">71</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1121067" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-11450300" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">Nice!  Escape characters and quoting are built-in too.  I wrote a full blown CSV file to std::vector parser in about 10 lines of code using this.</span> –&nbsp;<a href="http://stackoverflow.com/users/13140/ogre-psalm33" title="3202 reputation" class="comment-user">Ogre Psalm33</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(11450300, 1121067)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment11450300_1121067"><span title="2012-02-02 14:27:02Z" class="relativetime-clean">Feb 2 '12 at 14:27</span></a></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="1443710"></a>
<div id="answer-1443710" class="answer" data-answerid="1443710">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1443710">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">2</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>You could also take a look at capabilities of <code>Qt</code> library.</p>

<p>It has regular expressions support and QString class has nice methods, e.g. <code>split()</code> returning QStringList, list of strings obtained by splitting the original string with a provided delimiter. Should suffice for csv file.. </p>

<p>To get a column with a given header name I use following: <a href="http://stackoverflow.com/questions/970330/c-inheritance-qt-problem-qstring/1011601#1011601">http://stackoverflow.com/questions/970330/c-inheritance-qt-problem-qstring/1011601#1011601</a></p>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/1443710" title="short permalink to this answer" class="short-link" id="link-post-1443710">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1443710/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info ">
        <div class="user-action-time">
                                    answered
 <span title="2009-09-18 10:28:20Z" class="relativetime">Sep 18 '09 at 10:28</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/124944/madh"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/35c32f1091a49b6a30d083092bfadda1" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/124944/madh">MadH</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">455</span><span title="7 silver badges"><span class="badge2"></span><span class="badgecount">7</span></span><span title="22 bronze badges"><span class="badge3"></span><span class="badgecount">22</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1443710" class="comments dno">
        <table>
        <tbody>
        
            <tr><td></td><td></td></tr>
        
        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="1125863"></a>
<div id="answer-1125863" class="answer" data-answerid="1125863">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="1125863">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">1</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>Excuse me, but this all seems like a great deal of elaborate syntax to hide a few lines of code.</p>

<p>Why not this:</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="com">/**

  Read line from a CSV file

  @param[in] fp file pointer to open file
  @param[in] vls reference to vector of strings to hold next line

  */</span><span class="pln">
</span><span class="kwd">void</span><span class="pln"> readCSV</span><span class="pun">(</span><span class="pln"> </span><span class="typ">FILE</span><span class="pln"> </span><span class="pun">*</span><span class="pln">fp</span><span class="pun">,</span><span class="pln"> std</span><span class="pun">::</span><span class="typ">vector</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string</span><span class="pun">&gt;&amp;</span><span class="pln"> vls </span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    vls</span><span class="pun">.</span><span class="pln">clear</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln"> </span><span class="pun">!</span><span class="pln"> fp </span><span class="pun">)</span><span class="pln">
    	</span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">char</span><span class="pln"> buf</span><span class="pun">[</span><span class="lit">10000</span><span class="pun">];</span><span class="pln">
    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln"> </span><span class="pun">!</span><span class="pln"> fgets</span><span class="pun">(</span><span class="pln"> buf</span><span class="pun">,</span><span class="lit">999</span><span class="pun">,</span><span class="pln">fp</span><span class="pun">)</span><span class="pln"> </span><span class="pun">)</span><span class="pln">
    	</span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">string s </span><span class="pun">=</span><span class="pln"> buf</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">int</span><span class="pln"> p</span><span class="pun">,</span><span class="pln">q</span><span class="pun">;</span><span class="pln">
    q </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="com">// loop over columns</span><span class="pln">
    </span><span class="kwd">while</span><span class="pun">(</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    	p </span><span class="pun">=</span><span class="pln"> q</span><span class="pun">;</span><span class="pln">
    	q </span><span class="pun">=</span><span class="pln"> s</span><span class="pun">.</span><span class="pln">find_first_of</span><span class="pun">(</span><span class="str">",\n"</span><span class="pun">,</span><span class="pln">p</span><span class="pun">+</span><span class="lit">1</span><span class="pun">);</span><span class="pln">
    	</span><span class="kwd">if</span><span class="pun">(</span><span class="pln"> q </span><span class="pun">==</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> 
    		</span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
    	vls</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln"> s</span><span class="pun">.</span><span class="pln">substr</span><span class="pun">(</span><span class="pln">p</span><span class="pun">+</span><span class="lit">1</span><span class="pun">,</span><span class="pln">q</span><span class="pun">-</span><span class="pln">p</span><span class="pun">-</span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="typ">int</span><span class="pln"> _tmain</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> argc</span><span class="pun">,</span><span class="pln"> _TCHAR</span><span class="pun">*</span><span class="pln"> argv</span><span class="pun">[])</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    std</span><span class="pun">::</span><span class="typ">vector</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string</span><span class="pun">&gt;</span><span class="pln"> vls</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">FILE</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> fp </span><span class="pun">=</span><span class="pln"> fopen</span><span class="pun">(</span><span class="pln"> argv</span><span class="pun">[</span><span class="lit">1</span><span class="pun">],</span><span class="pln"> </span><span class="str">"r"</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln"> </span><span class="pun">!</span><span class="pln"> fp </span><span class="pun">)</span><span class="pln">
    	</span><span class="kwd">return</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    readCSV</span><span class="pun">(</span><span class="pln"> fp</span><span class="pun">,</span><span class="pln"> vls </span><span class="pun">);</span><span class="pln">
    readCSV</span><span class="pun">(</span><span class="pln"> fp</span><span class="pun">,</span><span class="pln"> vls </span><span class="pun">);</span><span class="pln">
    readCSV</span><span class="pun">(</span><span class="pln"> fp</span><span class="pun">,</span><span class="pln"> vls </span><span class="pun">);</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"row 3, col 4 is "</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> vls</span><span class="pun">[</span><span class="lit">3</span><span class="pun">].</span><span class="pln">c_str</span><span class="pun">()</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">"\n"</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/1125863" title="short permalink to this answer" class="short-link" id="link-post-1125863">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/1125863/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info user-hover">
        <div class="user-action-time">
                                    answered
 <span title="2009-07-14 14:39:29Z" class="relativetime">Jul 14 '09 at 14:39</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/16582/ravenspoint"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/febff21383acf755f8b375c322e36f2b" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/16582/ravenspoint">ravenspoint</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">6,519</span><span title="2 gold badges"><span class="badge1"></span><span class="badgecount">2</span></span><span title="13 silver badges"><span class="badge2"></span><span class="badgecount">13</span></span><span title="41 bronze badges"><span class="badge3"></span><span class="badgecount">41</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-1125863" class="comments dno">
        <table>
        <tbody>
        
            <tr><td></td><td></td></tr>
        
        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="11533116"></a>
<div id="answer-11533116" class="answer" data-answerid="11533116">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="11533116">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">1</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>As all the CSV questions seem to get redirected here, I thought I'd post my answer here.  This answer does not directly address the asker's question. I wanted to be able to read in a stream that is known to be in CSV format, and also the types of each field was already known. Of course, the method below could be used to treat every field to be a string type.</p>

<p>As an example of how I wanted to be able to use a CSV input stream, consider the following input (taken from <a href="http://en.wikipedia.org/wiki/Comma-separated_values" rel="nofollow">wikipedia's page on CSV</a>):</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> input</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln">
</span><span class="str">"Year,Make,Model,Description,Price\n"</span><span class="pln">
</span><span class="str">"1997,Ford,E350,\"ac, abs, moon\",3000.00\n"</span><span class="pln">
</span><span class="str">"1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\n"</span><span class="pln">
</span><span class="str">"1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",\"\",5000.00\n"</span><span class="pln">
</span><span class="str">"</span><span class="lit">1996</span><span class="pun">,</span><span class="typ">Jeep</span><span class="pun">,</span><span class="typ">Grand</span><span class="pln"> </span><span class="typ">Cherokee</span><span class="pun">,</span><span class="pln">\"MUST SELL</span><span class="pun">!</span><span class="pln">\n\
air</span><span class="pun">,</span><span class="pln"> moon roof</span><span class="pun">,</span><span class="pln"> loaded\"</span><span class="pun">,</span><span class="lit">4799.00</span><span class="pln">\n</span><span class="str">"</span><span class="pln">
</span><span class="pun">;</span></code></pre>

<p>Then, I wanted to be able to read in the data like this:</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="pln">std</span><span class="pun">::</span><span class="pln">istringstream ss</span><span class="pun">(</span><span class="pln">input</span><span class="pun">);</span><span class="pln">
std</span><span class="pun">::</span><span class="pln">string title</span><span class="pun">[</span><span class="lit">5</span><span class="pun">];</span><span class="pln">
</span><span class="typ">int</span><span class="pln"> year</span><span class="pun">;</span><span class="pln">
std</span><span class="pun">::</span><span class="pln">string make</span><span class="pun">,</span><span class="pln"> model</span><span class="pun">,</span><span class="pln"> desc</span><span class="pun">;</span><span class="pln">
</span><span class="typ">float</span><span class="pln"> price</span><span class="pun">;</span><span class="pln">
csv_istream</span><span class="pun">(</span><span class="pln">ss</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">&gt;&gt;</span><span class="pln"> title</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> title</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> title</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> title</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> title</span><span class="pun">[</span><span class="lit">4</span><span class="pun">];</span><span class="pln">
</span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">csv_istream</span><span class="pun">(</span><span class="pln">ss</span><span class="pun">)</span><span class="pln">
       </span><span class="pun">&gt;&gt;</span><span class="pln"> year </span><span class="pun">&gt;&gt;</span><span class="pln"> make </span><span class="pun">&gt;&gt;</span><span class="pln"> model </span><span class="pun">&gt;&gt;</span><span class="pln"> desc </span><span class="pun">&gt;&gt;</span><span class="pln"> price</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">//...do something with the record...</span><span class="pln">
</span><span class="pun">}</span></code></pre>

<p>This was the solution I ended up with.</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="kwd">struct</span><span class="pln"> csv_istream </span><span class="pun">{</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">istream </span><span class="pun">&amp;</span><span class="pln">is_</span><span class="pun">;</span><span class="pln">
    csv_istream </span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">istream </span><span class="pun">&amp;</span><span class="pln">is</span><span class="pun">)</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> is_</span><span class="pun">(</span><span class="pln">is</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">
    </span><span class="kwd">void</span><span class="pln"> scan_ws </span><span class="pun">()</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">is_</span><span class="pun">.</span><span class="pln">good</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">int</span><span class="pln"> c </span><span class="pun">=</span><span class="pln"> is_</span><span class="pun">.</span><span class="pln">peek</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">c </span><span class="pun">!=</span><span class="pln"> </span><span class="str">' '</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> c </span><span class="pun">!=</span><span class="pln"> </span><span class="str">'\t'</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
            is_</span><span class="pun">.</span><span class="pln">get</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">void</span><span class="pln"> scan </span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string </span><span class="pun">*</span><span class="pln">s </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        std</span><span class="pun">::</span><span class="pln">string ws</span><span class="pun">;</span><span class="pln">
        </span><span class="typ">int</span><span class="pln"> c </span><span class="pun">=</span><span class="pln"> is_</span><span class="pun">.</span><span class="pln">get</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">is_</span><span class="pun">.</span><span class="pln">good</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">do</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">c </span><span class="pun">==</span><span class="pln"> </span><span class="str">','</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> c </span><span class="pun">==</span><span class="pln"> </span><span class="str">'\n'</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                    ws </span><span class="pun">+=</span><span class="pln"> c</span><span class="pun">;</span><span class="pln">
                    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">c </span><span class="pun">!=</span><span class="pln"> </span><span class="str">' '</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> c </span><span class="pun">!=</span><span class="pln"> </span><span class="str">'\t'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                        </span><span class="pun">*</span><span class="pln">s </span><span class="pun">+=</span><span class="pln"> ws</span><span class="pun">;</span><span class="pln">
                        ws</span><span class="pun">.</span><span class="pln">clear</span><span class="pun">();</span><span class="pln">
                    </span><span class="pun">}</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">
                c </span><span class="pun">=</span><span class="pln"> is_</span><span class="pun">.</span><span class="pln">get</span><span class="pun">();</span><span class="pln">
            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">is_</span><span class="pun">.</span><span class="pln">good</span><span class="pun">());</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">is_</span><span class="pun">.</span><span class="pln">eof</span><span class="pun">())</span><span class="pln"> is_</span><span class="pun">.</span><span class="pln">clear</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> T</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">bool</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> set_value </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="kwd">operator</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string in</span><span class="pun">,</span><span class="pln"> T </span><span class="pun">&amp;</span><span class="pln">v</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            std</span><span class="pun">::</span><span class="pln">istringstream</span><span class="pun">(</span><span class="pln">in</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> v</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">};</span><span class="pln">
    </span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> set_value</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">bool</span><span class="pln"> SIGNED</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> convert </span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string in</span><span class="pun">,</span><span class="pln"> T </span><span class="pun">&amp;</span><span class="pln">v</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">SIGNED</span><span class="pun">)</span><span class="pln"> v </span><span class="pun">=</span><span class="pln"> </span><span class="pun">::</span><span class="pln">strtoll</span><span class="pun">(</span><span class="pln">in</span><span class="pun">.</span><span class="pln">c_str</span><span class="pun">(),</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">else</span><span class="pln"> v </span><span class="pun">=</span><span class="pln"> </span><span class="pun">::</span><span class="pln">strtoull</span><span class="pun">(</span><span class="pln">in</span><span class="pun">.</span><span class="pln">c_str</span><span class="pun">(),</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">void</span><span class="pln"> </span><span class="kwd">operator</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string in</span><span class="pun">,</span><span class="pln"> T </span><span class="pun">&amp;</span><span class="pln">v</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            convert</span><span class="pun">&lt;</span><span class="pln">is_signed_int</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;::</span><span class="pln">val</span><span class="pun">&gt;(</span><span class="pln">in</span><span class="pun">,</span><span class="pln"> v</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">};</span><span class="pln">
    </span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> csv_istream </span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">operator</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">T </span><span class="pun">&amp;</span><span class="pln">v</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        std</span><span class="pun">::</span><span class="pln">string tmp</span><span class="pun">;</span><span class="pln">
        scan</span><span class="pun">(&amp;</span><span class="pln">tmp</span><span class="pun">);</span><span class="pln">
        set_value</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> is_int</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;::</span><span class="pln">val</span><span class="pun">&gt;()(</span><span class="pln">tmp</span><span class="pun">,</span><span class="pln"> v</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="kwd">this</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> csv_istream </span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">operator</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string </span><span class="pun">&amp;</span><span class="pln">v</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        v</span><span class="pun">.</span><span class="pln">clear</span><span class="pun">();</span><span class="pln">
        scan_ws</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">is_</span><span class="pun">.</span><span class="pln">peek</span><span class="pun">()</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="str">'"'</span><span class="pun">)</span><span class="pln"> scan</span><span class="pun">(&amp;</span><span class="pln">v</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            std</span><span class="pun">::</span><span class="pln">string tmp</span><span class="pun">;</span><span class="pln">
            is_</span><span class="pun">.</span><span class="pln">get</span><span class="pun">();</span><span class="pln">
            std</span><span class="pun">::</span><span class="pln">getline</span><span class="pun">(</span><span class="pln">is_</span><span class="pun">,</span><span class="pln"> tmp</span><span class="pun">,</span><span class="pln"> </span><span class="str">'"'</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">is_</span><span class="pun">.</span><span class="pln">peek</span><span class="pun">()</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">'"'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                v </span><span class="pun">+=</span><span class="pln"> tmp</span><span class="pun">;</span><span class="pln">
                v </span><span class="pun">+=</span><span class="pln"> is_</span><span class="pun">.</span><span class="pln">get</span><span class="pun">();</span><span class="pln">
                std</span><span class="pun">::</span><span class="pln">getline</span><span class="pun">(</span><span class="pln">is_</span><span class="pun">,</span><span class="pln"> tmp</span><span class="pun">,</span><span class="pln"> </span><span class="str">'"'</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            v </span><span class="pun">+=</span><span class="pln"> tmp</span><span class="pun">;</span><span class="pln">
            scan</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="kwd">this</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> T</span><span class="pun">&gt;</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> csv_istream </span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">operator</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">T </span><span class="pun">&amp;(*</span><span class="pln">manip</span><span class="pun">)(</span><span class="pln">T </span><span class="pun">&amp;))</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        is_ </span><span class="pun">&gt;&gt;</span><span class="pln"> manip</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="kwd">this</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">operator</span><span class="pln"> </span><span class="kwd">bool</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">!</span><span class="pln">is_</span><span class="pun">.</span><span class="pln">fail</span><span class="pun">();</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">};</span></code></pre>

<p>With the following helpers that may be simplified by the new integral traits templates in C++11:</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_signed_int </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pln"> </span><span class="pun">};</span><span class="pln"> </span><span class="pun">};</span><span class="pln">
</span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_signed_int</span><span class="str">&lt;short&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">};</span><span class="pln"> </span><span class="pun">};</span><span class="pln">
</span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_signed_int</span><span class="str">&lt;int&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">};</span><span class="pln"> </span><span class="pun">};</span><span class="pln">
</span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_signed_int</span><span class="str">&lt;long&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">};</span><span class="pln"> </span><span class="pun">};</span><span class="pln">
</span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_signed_int</span><span class="pun">&lt;</span><span class="kwd">long</span><span class="pln"> </span><span class="kwd">long</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">};</span><span class="pln"> </span><span class="pun">};</span><span class="pln">

</span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_unsigned_int </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pln"> </span><span class="pun">};</span><span class="pln"> </span><span class="pun">};</span><span class="pln">
</span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_unsigned_int</span><span class="pun">&lt;</span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">short</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">};</span><span class="pln"> </span><span class="pun">};</span><span class="pln">
</span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_unsigned_int</span><span class="pun">&lt;</span><span class="kwd">unsigned</span><span class="pln"> </span><span class="typ">int</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">};</span><span class="pln"> </span><span class="pun">};</span><span class="pln">
</span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_unsigned_int</span><span class="pun">&lt;</span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">long</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">};</span><span class="pln"> </span><span class="pun">};</span><span class="pln">
</span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_unsigned_int</span><span class="pun">&lt;</span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">long</span><span class="pln"> </span><span class="kwd">long</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">};</span><span class="pln"> </span><span class="pun">};</span><span class="pln">

</span><span class="kwd">template</span><span class="pln"> </span><span class="pun">&lt;</span><span class="kwd">typename</span><span class="pln"> T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">struct</span><span class="pln"> is_int </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">enum</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> val </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">is_signed_int</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;::</span><span class="pln">val </span><span class="pun">||</span><span class="pln"> is_unsigned_int</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;::</span><span class="pln">val</span><span class="pun">)</span><span class="pln"> </span><span class="pun">};</span><span class="pln">
</span><span class="pun">};</span></code></pre>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/11533116" title="short permalink to this answer" class="short-link" id="link-post-11533116">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/11533116/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">


    <div class="user-info ">
        <div class="user-action-time">
                            edited
                             <a href="http://stackoverflow.com/posts/11533116/revisions" title="show all edits to this post"><span title="2012-07-18 19:08:06Z" class="relativetime">Jul 18 '12 at 19:08</span></a>

        </div>
        <div class="user-gravatar32">
            
        </div>
        <div class="user-details">
            <br>
            
        </div>
    </div>
    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info user-hover">
        <div class="user-action-time">
                                    answered
 <span title="2012-07-18 01:33:22Z" class="relativetime">Jul 18 '12 at 1:33</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/315052/user315052"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/48c8e3921015c30992072fb4e03cb9ec" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/315052/user315052">user315052</a><br>
            <span class="reputation-score" title="reputation score 11566" dir="ltr">11.6k</span><span title="1 gold badge"><span class="badge1"></span><span class="badgecount">1</span></span><span title="9 silver badges"><span class="badge2"></span><span class="badgecount">9</span></span><span title="20 bronze badges"><span class="badge3"></span><span class="badgecount">20</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-11533116" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-16288578" class="comment">
        <td></td>
        <td class="comment-text"><div><span class="comment-copy">Link to the code in action: <a href="http://ideone.com/DFjJE" rel="nofollow">ideone.com/DFjJE</a></span> –&nbsp;<a href="http://stackoverflow.com/users/315052/user315052" title="11566 reputation" class="comment-user">user315052</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(16288578, 11533116)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment16288578_11533116"><span title="2012-08-29 01:00:38Z" class="relativetime-clean">Aug 29 '12 at 1:00</span></a></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="5836370"></a>
<div id="answer-5836370" class="answer" data-answerid="5836370">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="5836370">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">0</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>If you don't want to deal with including boost in your project (it is considerably large if all you are going to use it for is CSV parsing...)</p>

<p>I have had luck with the CSV parsing here:</p>

<p><a href="http://www.zedwood.com/article/112/cpp-csv-parser" rel="nofollow">http://www.zedwood.com/article/112/cpp-csv-parser</a></p>

<p>It handles quoted fields - but does not handle inline \n characters (which is probably fine for most uses).</p>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/5836370" title="short permalink to this answer" class="short-link" id="link-post-5836370">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/5836370/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info user-hover">
        <div class="user-action-time">
                                    answered
 <span title="2011-04-29 19:12:46Z" class="relativetime">Apr 29 '11 at 19:12</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/289182/npike"><div class="gravatar-wrapper-32"><img src="./parsing - CSV parser in C++ - Stack Overflow_files/gcraX.jpg" alt=""></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/289182/npike">NPike</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">2,493</span><span title="15 silver badges"><span class="badge2"></span><span class="badgecount">15</span></span><span title="39 bronze badges"><span class="badge3"></span><span class="badgecount">39</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-5836370" class="comments">
        <table>
        <tbody>
                    
    <tr id="comment-15103785" class="comment">
        <td class="comment-actions"><table><tbody><tr>
<td class="comment-score">
<span title="number of &#39;useful comment&#39; votes received" class="cool">1</span>
</td>
<td>
&nbsp;
</td></tr>
</tbody></table></td>
        <td class="comment-text"><div><span class="comment-copy">Shouldn't the compiler strip out everything that is non-essential?</span> –&nbsp;<a href="http://stackoverflow.com/users/339843/tofutim" title="2974 reputation" class="comment-user">tofutim</a> <span class="comment-date" dir="ltr"><a class="comment-link" onclick="StackExchange.question.highlightComment(15103785, 5836370)" href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#comment15103785_5836370"><span title="2012-07-12 05:46:50Z" class="relativetime-clean">Jul 12 '12 at 5:46</span></a></span></div></td>
    </tr>

        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="13924244"></a>
<div id="answer-13924244" class="answer" data-answerid="13924244">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="13924244">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">0</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>Another CSV I/O library can be found here:</p>

<p><a href="http://code.google.com/p/fast-cpp-csv-parser/" rel="nofollow">http://code.google.com/p/fast-cpp-csv-parser/</a></p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="com">#include</span><span class="pln"> </span><span class="str">"csv.h"</span><span class="pln">

</span><span class="typ">int</span><span class="pln"> main</span><span class="pun">(){</span><span class="pln">
  io</span><span class="pun">::</span><span class="typ">CSVReader</span><span class="pun">&lt;</span><span class="lit">3</span><span class="pun">&gt;</span><span class="pln"> in</span><span class="pun">(</span><span class="str">"ram.csv"</span><span class="pun">);</span><span class="pln">
  in</span><span class="pun">.</span><span class="pln">read_header</span><span class="pun">(</span><span class="pln">io</span><span class="pun">::</span><span class="pln">ignore_extra_column</span><span class="pun">,</span><span class="pln"> </span><span class="str">"vendor"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"size"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"speed"</span><span class="pun">);</span><span class="pln">
  std</span><span class="pun">::</span><span class="pln">string vendor</span><span class="pun">;</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> size</span><span class="pun">;</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> speed</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">while</span><span class="pun">(</span><span class="pln">in</span><span class="pun">.</span><span class="pln">read_row</span><span class="pun">(</span><span class="pln">vendor</span><span class="pun">,</span><span class="pln"> size</span><span class="pun">,</span><span class="pln"> speed</span><span class="pun">)){</span><span class="pln">
    </span><span class="com">// do stuff with the data</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/13924244" title="short permalink to this answer" class="short-link" id="link-post-13924244">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/13924244/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info ">
        <div class="user-action-time">
                                    answered
 <span title="2012-12-17 23:53:34Z" class="relativetime">Dec 17 '12 at 23:53</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/1910537/heygard-flisch"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/374028f00ff8b6c03458a0bdb47dff2c" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/1910537/heygard-flisch">Heygard Flisch</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">14</span><span title="2 bronze badges"><span class="badge3"></span><span class="badgecount">2</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-13924244" class="comments dno">
        <table>
        <tbody>
        
            <tr><td></td><td></td></tr>
        
        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>

  
<a name="14947876"></a>
<div id="answer-14947876" class="answer" data-answerid="14947876">
    <table>
        <tbody><tr>
            <td class="votecell">
                

<div class="vote">
    <input type="hidden" value="14947876">
    <a class="vote-up-off" title="This answer is useful (click again to undo)">up vote</a>
    <span class="vote-count-post ">0</span>
    <a class="vote-down-off" title="This answer is not useful (click again to undo)">down vote</a>
    

 
</div>

            </td>
            


<td class="answercell">
    <div class="post-text"><p>Here is code for reading a matrix, note you also have a csvwrite function in matlab</p>

<pre class="lang-c prettyprint prettyprinted" style=""><code><span class="kwd">void</span><span class="pln"> loadFromCSV</span><span class="pun">(</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">string</span><span class="pun">&amp;</span><span class="pln"> filename </span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">ifstream       file</span><span class="pun">(</span><span class="pln"> filename</span><span class="pun">.</span><span class="pln">c_str</span><span class="pun">()</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
    std</span><span class="pun">::</span><span class="typ">vector</span><span class="pun">&lt;</span><span class="pln"> std</span><span class="pun">::</span><span class="typ">vector</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln">   matrix</span><span class="pun">;</span><span class="pln">
    std</span><span class="pun">::</span><span class="typ">vector</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">string</span><span class="pun">&gt;</span><span class="pln">   row</span><span class="pun">;</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">string                line</span><span class="pun">;</span><span class="pln">
    std</span><span class="pun">::</span><span class="pln">string                cell</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">while</span><span class="pun">(</span><span class="pln"> file </span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        std</span><span class="pun">::</span><span class="pln">getline</span><span class="pun">(</span><span class="pln">file</span><span class="pun">,</span><span class="pln">line</span><span class="pun">);</span><span class="pln">
        std</span><span class="pun">::</span><span class="pln">stringstream lineStream</span><span class="pun">(</span><span class="pln">line</span><span class="pun">);</span><span class="pln">
        row</span><span class="pun">.</span><span class="pln">clear</span><span class="pun">();</span><span class="pln">

        </span><span class="kwd">while</span><span class="pun">(</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">getline</span><span class="pun">(</span><span class="pln"> lineStream</span><span class="pun">,</span><span class="pln"> cell</span><span class="pun">,</span><span class="pln"> </span><span class="str">','</span><span class="pln"> </span><span class="pun">)</span><span class="pln"> </span><span class="pun">)</span><span class="pln">
            row</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln"> cell </span><span class="pun">);</span><span class="pln">

        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln"> </span><span class="pun">!</span><span class="pln">row</span><span class="pun">.</span><span class="pln">empty</span><span class="pun">()</span><span class="pln"> </span><span class="pun">)</span><span class="pln">
            matrix</span><span class="pun">.</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln"> row </span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">for</span><span class="pun">(</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;</span><span class="typ">int</span><span class="pun">(</span><span class="pln">matrix</span><span class="pun">.</span><span class="pln">size</span><span class="pun">());</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pun">(</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> j</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">&lt;</span><span class="typ">int</span><span class="pun">(</span><span class="pln">matrix</span><span class="pun">[</span><span class="pln">i</span><span class="pun">].</span><span class="pln">size</span><span class="pun">());</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">)</span><span class="pln">
            std</span><span class="pun">::</span><span class="pln">cout </span><span class="pun">&lt;&lt;</span><span class="pln"> matrix</span><span class="pun">[</span><span class="pln">i</span><span class="pun">][</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="str">" "</span><span class="pun">;</span><span class="pln">

        std</span><span class="pun">::</span><span class="pln">cout </span><span class="pun">&lt;&lt;</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">endl</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
</div>
    <table class="fw">
    <tbody><tr>
    <td class="vt">









<div class="post-menu"><a href="http://stackoverflow.com/a/14947876" title="short permalink to this answer" class="short-link" id="link-post-14947876">share</a><span class="lsep">|</span><a href="http://stackoverflow.com/posts/14947876/edit" class="suggest-edit-post" title="">improve this answer</a></div>                    </td>
    <td align="right" class="post-signature">


    <div class="user-info ">
        <div class="user-action-time">
                            edited
                             <a href="http://stackoverflow.com/posts/14947876/revisions" title="show all edits to this post"><span title="2013-02-19 00:42:38Z" class="relativetime">Feb 19 at 0:42</span></a>

        </div>
        <div class="user-gravatar32">
            
        </div>
        <div class="user-details">
            <br>
            
        </div>
    </div>
    </td>
            


    <td align="right" class="post-signature">   
       

    

    <div class="user-info ">
        <div class="user-action-time">
                                    answered
 <span title="2013-02-19 00:37:11Z" class="relativetime">Feb 19 at 0:37</span>
        </div>
        <div class="user-gravatar32">
            <a href="http://stackoverflow.com/users/636517/jim-m"><div class=""><img src="./parsing - CSV parser in C++ - Stack Overflow_files/df9d6e2b945222a448a1d231ffa1a8e3" alt="" width="32" height="32"></div></a>
        </div>
        <div class="user-details">
            <a href="http://stackoverflow.com/users/636517/jim-m">Jim M.</a><br>
            <span class="reputation-score" title="reputation score" dir="ltr">36</span><span title="3 bronze badges"><span class="badge3"></span><span class="badgecount">3</span></span>
        </div>
    </div>

    </td>
    </tr>
    </tbody></table>
</td>
        </tr>



<tr>
<td class="votecell"></td>
<td>
    <div id="comments-14947876" class="comments dno">
        <table>
        <tbody>
        
            <tr><td></td><td></td></tr>
        
        </tbody>
    
        </table>
    </div>
    
</td>
</tr>
   
    
    </tbody></table>
</div>
    <a name="new-answer"></a>
    <form id="post-form" action="http://stackoverflow.com/questions/1120140/answer/submit" method="post" class="post-form">
        <h2 class="space">Your Answer</h2>



    
<script type="text/javascript">
    StackExchange.ready(function() {
        initTagRenderer("".split(" "), "".split(" "));
         
        prepareEditor({
            heartbeatType: 'answer',
            bindNavPrevention: true,
            postfix: "",
            onDemand: true,
            discardSelector: ".discard-answer"
            ,immediatelyShowMarkdownHelp:true
        });
        

    });  
</script>


<div id="post-editor" class="post-editor">

    <div style="position: relative;">     
        <div class="wmd-container">
            <div id="wmd-button-bar" class="wmd-button-bar"><ul id="wmd-button-row" class="wmd-button-row"><li id="wmd-bold-button" class="wmd-button" style="left: 0px;"><span style="background-position: 0px -20px;"></span></li><li id="wmd-italic-button" class="wmd-button" style="left: 25px;"><span style="background-position: -20px -20px;"></span></li><li id="wmd-spacer1" class="wmd-spacer" style="left: 50px;"><span style="background-position: -40px -20px;"></span></li><li id="wmd-link-button" class="wmd-button" style="left: 75px;"><span style="background-position: -40px -20px;"></span></li><li id="wmd-quote-button" class="wmd-button" style="left: 100px;"><span style="background-position: -60px -20px;"></span></li><li id="wmd-code-button" class="wmd-button" style="left: 125px;"><span style="background-position: -80px -20px;"></span></li><li id="wmd-image-button" class="wmd-button" style="left: 150px;"><span style="background-position: -100px -20px;"></span></li><li id="wmd-spacer2" class="wmd-spacer" style="left: 175px;"><span style="background-position: -120px -20px;"></span></li><li id="wmd-olist-button" class="wmd-button" style="left: 200px;"><span style="background-position: -120px -20px;"></span></li><li id="wmd-ulist-button" class="wmd-button" style="left: 225px;"><span style="background-position: -140px -20px;"></span></li><li id="wmd-heading-button" class="wmd-button" style="left: 250px;"><span style="background-position: -160px -20px;"></span></li><li id="wmd-hr-button" class="wmd-button" style="left: 275px;"><span style="background-position: -180px -20px;"></span></li><li id="wmd-spacer3" class="wmd-spacer" style="left: 300px;"><span style="background-position: -200px -20px;"></span></li><li id="wmd-undo-button" class="wmd-button" style="left: 325px;"><span style="background-position: -200px -20px;"></span></li><li id="wmd-redo-button" class="wmd-button" style="left: 350px;"><span style="background-position: -220px -20px;"></span></li></ul></div>
            <textarea id="wmd-input" class="wmd-input" name="post-text" cols="92" rows="15" tabindex="101" data-min-length=""></textarea>
        </div>
    </div>

    <div class="fl" style="margin-top: 8px; height:24px;">&nbsp;</div>
    <div id="draft-saved" class="draft-saved community-option fl" style="margin-top: 8px; height:24px; display:none;">draft saved</div>

    <div id="draft-discarded" class="draft-discarded community-option fl" style="margin-top: 8px; height:24px; display:none;">draft discarded</div>



    <div id="wmd-preview" class="wmd-preview"></div>
    <div></div>
    <div class="edit-block">
        <input id="fkey" name="fkey" type="hidden" value="cc26a9a6502719400ff92191e4f5f1ea">
        <input id="author" name="author" type="text">
    </div>
</div>
        <div style="position: relative;"> 
    <div class="form-item">
        <table>
        <tbody><tr>
                <td class="vm open-id-login">
                    <a id="login-link" style="font-size: 200%; margin-left: 30px;" href="http://stackoverflow.com/users/login?returnurl=%2fquestions%2f1120140%2fcsv-parser-in-c">log in</a>
                    <script type="text/javascript">
                        StackExchange.ready(function () {
                            StackExchange.helpers.onClickDraftSave('#login-link');
                        });
                    </script>
                </td>
                    <script type="text/javascript">
                StackExchange.ready(function () {
                    StackExchange.helpers.bindHelpOverlayEvents($('.vm input'));
                });
            </script>
                <td class="orcell">
                    <div class="orword">or</div>
                    <div class="orline"></div>
                </td>
            <td class="vm">
                <div>
                    <label for="display-name">Name</label>
                    <input type="text" size="30" maxlength="30" value="" tabindex="105" style="opacity: 1; position: absolute; background-color: white; color: black; -webkit-text-fill-color: black; width: 209px; height: 16px; line-height: normal; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 13px; text-align: start; border: 1px solid rgb(153, 153, 153);" class="actual-edit-overlay" disabled="disabled"><input id="display-name" name="display-name" type="text" size="30" maxlength="30" value="" tabindex="105" style="opacity: 0.4; z-index: 1; position: relative;" class="edit-field-overlayed">
                </div>
                <div>
                    <label for="m-address">Email</label>
                    <input type="text" size="40" maxlength="100" value="" tabindex="106" style="opacity: 1; position: absolute; background-color: white; color: black; -webkit-text-fill-color: black; width: 269px; height: 16px; line-height: normal; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 13px; text-align: start; border: 1px solid rgb(153, 153, 153);" class="actual-edit-overlay" disabled="disabled"><input id="m-address" name="m-address" type="text" size="40" maxlength="100" value="" tabindex="106" style="opacity: 0.4; z-index: 1; position: relative;" class="edit-field-overlayed">
                    <span class="edit-field-overlay">required, but never shown</span>
                </div>
                    <div>
                        <label for="home-page">Home Page</label>
                        <input type="text" size="40" maxlength="200" value="" tabindex="107" style="opacity: 1; position: absolute; background-color: white; color: black; -webkit-text-fill-color: black; width: 269px; height: 16px; line-height: normal; font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 13px; text-align: start; border: 1px solid rgb(153, 153, 153);" class="actual-edit-overlay" disabled="disabled"><input id="home-page" name="home-page" type="text" size="40" maxlength="200" value="" tabindex="107" style="opacity: 0.4; z-index: 1; position: relative;" class="edit-field-overlayed">
                    </div>
            </td>
        </tr>
        </tbody></table>
    </div>
        </div>
           
            <div class="form-submit cbt">
            <input id="submit-button" type="submit" value="Post Your Answer" tabindex="110">
            <a href="http://stackoverflow.com/questions/1120140/csv-parser-in-c#" class="discard-answer dno">discard</a>
    <p class="privacy-policy-agreement">
        By posting your answer, you agree to the 
        <a href="http://stackexchange.com/legal/privacy-policy" target="_blank">privacy policy</a> and 
        <a href="http://stackexchange.com/legal/terms-of-service" target="_blank">terms of service</a>.
    </p>
    <input type="hidden" name="legalLinksShown" value="1">
        </div>
    </form>



        <h2 class="bottom-notice">
                Not the answer you're looking for? 
            Browse other questions tagged <a href="http://stackoverflow.com/questions/tagged/c%2b%2b" class="post-tag" title="show questions tagged &#39;c++&#39;" rel="tag">c++</a> <a href="http://stackoverflow.com/questions/tagged/parsing" class="post-tag" title="show questions tagged &#39;parsing&#39;" rel="tag">parsing</a> <a href="http://stackoverflow.com/questions/tagged/text" class="post-tag" title="show questions tagged &#39;text&#39;" rel="tag">text</a> <a href="http://stackoverflow.com/questions/tagged/csv" class="post-tag" title="show questions tagged &#39;csv&#39;" rel="tag">csv</a> 
                or <a href="http://stackoverflow.com/questions/ask">ask your own question</a>.
        </h2>
</div>
</div>
<div id="sidebar">



     <script type="text/javascript">
        window.showNewUser = true;

            
                (function(){
                    var cs = window.sessionStorage && window.sessionStorage['tNewsletter'];
                    var m = /:\/\/([^\/]*)/.exec(document.referrer);
                    var h = {'www.reddit.com':1,'news.ycombinator.com':1};
                    if(window.sessionStorage && (cs || (m && m.length == 2 && h[m[1]]))){
                        showNewUser = false;
                        StackExchange.ready(function(){
                            StackExchange.newsletterAd.loader(m[1], cs);
                        });
                    }
                    if (window.localStorage && showNewUser){
                        var c = parseInt(localStorage['nuCounter'],10); 
                        c = isNaN(c) ? 1 : c+1;
                        window.localStorage['nuCounter'] = c; 
                        showNewUser = c < 10;
                    }
                })()
            
     </script>
    <div class="module newuser newuser-greeting" id="newuser-box" style="display:none;">
        <h4>Hello World!</h4>
        <div>
            <p>This is a collaboratively edited question and answer site for <b>professional and enthusiast programmers</b>. It's 100% free, no registration required.</p>
            <p class="ar">
                    <a href="http://stackoverflow.com/about?mnu=1">about »</a>&nbsp;&nbsp;&nbsp;
                <a href="http://stackoverflow.com/faq?mnu=1">faq »</a>
            </p>
        </div>
    </div>
     <script type="text/javascript">
        if (showNewUser) {
            document.getElementById('newuser-box').style.display = '';
        }
     </script>
        <div class="module question-stats">
        <p class="label-key">tagged</p>
        <div class="tagged"><a href="http://stackoverflow.com/questions/tagged/c%2b%2b" class="post-tag" title="show questions tagged &#39;c++&#39;" rel="tag">c++</a>&nbsp;<span class="item-multiplier"><span class="item-multiplier-x">×</span>&nbsp;<span class="item-multiplier-count">180655</span></span><br>
<a href="http://stackoverflow.com/questions/tagged/parsing" class="post-tag" title="show questions tagged &#39;parsing&#39;" rel="tag">parsing</a>&nbsp;<span class="item-multiplier"><span class="item-multiplier-x">×</span>&nbsp;<span class="item-multiplier-count">15611</span></span><br>
<a href="http://stackoverflow.com/questions/tagged/text" class="post-tag" title="show questions tagged &#39;text&#39;" rel="tag">text</a>&nbsp;<span class="item-multiplier"><span class="item-multiplier-x">×</span>&nbsp;<span class="item-multiplier-count">7909</span></span><br>
<a href="http://stackoverflow.com/questions/tagged/csv" class="post-tag" title="show questions tagged &#39;csv&#39;" rel="tag">csv</a>&nbsp;<span class="item-multiplier"><span class="item-multiplier-x">×</span>&nbsp;<span class="item-multiplier-count">7535</span></span><br>
</div>
        <table id="qinfo">
            <tbody><tr>
                <td><p class="label-key">asked</p></td>
                <td style="padding-left:10px"><p class="label-key" title="2009-07-13 15:25:50Z"><b>3 years ago</b></p></td>
            </tr>
            <tr>
                <td><p class="label-key">viewed</p></td>

                <td style="padding-left:10px">
                    <p class="label-key">
                        <b>38142 times</b>
                    </p>
                </td>
            </tr>
            <tr>
                <td><p class="label-key">active</p></td>
                <td style="padding-left:10px"><p class="label-key"><b><a href="http://stackoverflow.com/questions/1120140/csv-parser-in-c?lastactivity" class="lastactivity-link" title="2013-02-19 00:42:38Z">5 days ago</a></b></p></td>
            </tr>
        </tbody></table>
    </div>
    
<div class="module community-bulletin" data-tracker="cb=1">
    <h4>Community Bulletin</h4>
    <div class="related">
        <div class="spacer">
            <div class="bulletin-item-type"><a href="http://blog.stackoverflow.com/?cb=1" class="event-date" target="_blank">blog</a></div>
            <div class="bulletin-item-content">
                <a href="http://blog.stackoverflow.com/2013/02/podcast-43-false-facts-blood-feuds/?cb=1" class="question-hyperlink" target="_blank">Podcast #43 – False Facts &amp; Blood Feuds</a>
            </div>
            <br class="cbt">
        </div>
    </div>
</div>    
                <script type="text/javascript">
                var scriptSrc = "http://engine.adzerk.net/z/8277/adzerk1_2_4_43,adzerk2_2_17_45,adzerk3_2_4_44?keywords=c%2b%2b,parsing,text,csv";
                if (document.referrer) {
                    if (/\?/.test(scriptSrc))
                        scriptSrc += "&";
                    else
                        scriptSrc += "?";
                    scriptSrc += "xReferrer=" + document.referrer;
                }
                StackExchange.ready(function () {
                    var z = document.createElement("script");
                    z.type = "text/javascript";
                    z.async = "true";
                    z.src = scriptSrc;
                    var s = document.getElementsByTagName("script")[0];
                    s.parentNode.insertBefore(z, s);
                });
            </script>
        <div class="everyonelovesstackoverflow" id="adzerk2">
        </div>
    <div id="hireme">
        <script type="text/javascript">
            var careers_adurl="http://careers.stackoverflow.com/gethired/js",careers_cssurl="//careerscdn.sstatic.net/careers/gethired/sidebar.css?fffffffff879eaa0",careers_leaderboardcssurl="//careerscdn.sstatic.net/careers/gethired/ninja.min.css?3a7fc0",careers_companycssurl="//careerscdn.sstatic.net/careers/gethired/company",careers_adselector="div.hireme, div#hireme";StackExchange.ready(function(){$.ajax({url:"//careerscdn.sstatic.net/careers/gethired/loader.min.js?3a7fc0",dataType:"script",cache:!0})})
        </script>
    </div>



      
    
    <div class="module sidebar-linked">
        <h4 id="h-linked">Linked</h4>
        <div class="linked" data-tracker="lq=1">
            <div class="spacer">
<a href="http://stackoverflow.com/questions/415515/how-can-i-read-and-manipulate-csv-file-data-in-c?lq=1" class="question-hyperlink">How can I read and manipulate CSV file data in C++?</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/1474790/how-to-read-write-into-from-text-file-with-comma-separated-values?lq=1" class="question-hyperlink">How to read-write into/from text file with comma separated values</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/1443064/parsing-file-in-c?lq=1" class="question-hyperlink">Parsing file in C++</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/4465329/c-c-equivalents-to-the-python-standard-library?lq=1" class="question-hyperlink">C / C++ equivalents to the Python Standard Library</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/10814368/fast-simple-csv-parsing-in-c?lq=1" class="question-hyperlink">Fast, Simple CSV Parsing in C++</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/5702548/c-multiple-definition-of-operator?lq=1" class="question-hyperlink">C++ multiple definition of operator&gt;&gt;</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/7827274/whats-the-preferred-library-for-csv-parsing-writing-in-c?lq=1" class="question-hyperlink">what's the preferred library for CSV parsing/writing in C++?</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/12233596/reading-csv-data-from-a-file?lq=1" class="question-hyperlink">Reading CSV data from a file</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/4669933/read-csv-file-into-c?lq=1" class="question-hyperlink">read csv file into c++</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/970330/c-inheritance-qt-problem-qstring?lq=1" class="question-hyperlink">c++ inheritance Qt problem qstring</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/6943829/reading-values-from-fields-in-a-csv-file?lq=1" class="question-hyperlink">Reading Values from fields in a .csv file?</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/10598872/how-to-read-some-columns-from-a-csv-file-with-c?lq=1" class="question-hyperlink">How to read some columns from a CSV file with C++?</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/11310947/splitting-a-line-of-a-csv-file-into-a-stdvector?lq=1" class="question-hyperlink">Splitting a line of a csv file into a std::vector?</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/5237426/c-reading-csvs?lq=1" class="question-hyperlink">C++ reading CSVs</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/10951447/load-stdmap-from-text-file?lq=1" class="question-hyperlink">load std::map from text file</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/9651447/reading-data-from-a-csv-and-into-arrays-in-c?lq=1" class="question-hyperlink">Reading data from a .csv and into arrays in c++</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/9213489/c-read-from-file-and-tokenize-data?lq=1" class="question-hyperlink">C++ read from file and tokenize data</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/10732664/how-to-ignore-delimiter-when-it-commented-or-quoted?lq=1" class="question-hyperlink">How to ignore delimiter when it commented or quoted</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/3111019/effeciently-read-large-spreadsheet-file-in-c?lq=1" class="question-hyperlink">effeciently read large spreadsheet file in C++</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/7271854/c-boost-read-csv-data-and-add-double-quotes-to-certain-columns-then-re-write-b?lq=1" class="question-hyperlink">C++ Boost Read CSV data and add double quotes to certain columns then re-write back to file</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/4764186/c-csv-writer-example?lq=1" class="question-hyperlink">C++ csv writer example</a>
</div>
<div class="spacer more">
<a href="http://stackoverflow.com/search?q=url%3a%22http%3a%2f%2fstackoverflow.com%2fquestions%2f1120140%2f*%22&lq=1">see more linked questions…</a></div>

        </div>
    </div>
    <div class="module sidebar-related">
        <h4 id="h-related">Related</h4>
        <div class="related" data-tracker="rq=1">
            <div class="spacer">
<a href="http://stackoverflow.com/questions/2405787/csv-parser-in-one-routine-function?rq=1" class="question-hyperlink">CSV Parser in one routine/function?</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/3065095/how-do-i-efficiently-parse-a-csv-file-in-perl?rq=1" class="question-hyperlink">How do I efficiently parse a CSV file in Perl?</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/3222019/whats-the-best-way-to-parser-csv-using-python?rq=1" class="question-hyperlink">whats the best way to parser csv using python?</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/3980004/what-am-i-doing-wrong-in-my-perl-script-written-to-parse-a-csv-file?rq=1" class="question-hyperlink">What am I doing wrong in my Perl script written to parse a CSV file?</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/5060607/csv-parser-works-in-windows-not-linux?rq=1" class="question-hyperlink">CSV Parser works in windows, not linux</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/5063022/use-scala-parser-combinator-to-parse-csv-files?rq=1" class="question-hyperlink">Use Scala parser combinator to parse CSV files</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/5537219/iphone-complex-csv-parser?rq=1" class="question-hyperlink">iPhone : Complex CSV Parser</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/6155308/fast-csv-parser-with-low-gc-load?rq=1" class="question-hyperlink">Fast CSV parser with low GC load</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/7233535/android-csv-parser-problem?rq=1" class="question-hyperlink">Android CSV parser problem</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/7625079/download-csv-directly-into-python-csv-parser?rq=1" class="question-hyperlink">Download CSV directly into Python CSV parser</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/7854550/c-sharp-csv-parser-to-parse-double-quotes?rq=1" class="question-hyperlink">C# CSV parser to parse double quotes</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/8144845/javascript-csv-parser-library?rq=1" class="question-hyperlink">JavaScript CSV Parser Library</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/8150192/from-text-file-to-csv-using-python?rq=1" class="question-hyperlink">from text file to csv using Python</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/10578119/awk-recursive-descent-csv-parser?rq=1" class="question-hyperlink">AWK: Recursive Descent CSV Parser</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/10856438/parsing-and-reformatting-csv-text-data-using-python?rq=1" class="question-hyperlink">Parsing and reformatting CSV/text data using Python</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/11211257/csv-parser-reading-headers?rq=1" class="question-hyperlink">csv parser reading headers</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/11549411/powershell-parse-a-structured-text-file-and-save-to-csv?rq=1" class="question-hyperlink">Powershell: Parse a structured text file and save to .CSV</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/11552983/node-csv-parser-output-issue?rq=1" class="question-hyperlink">Node CSV Parser output issue</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/11740892/csv-parser-spaces-c-sharp?rq=1" class="question-hyperlink">CSV parser spaces C#</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/11852560/c-csv-parser-split-jobs?rq=1" class="question-hyperlink">C++ csv parser, split jobs</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/12878017/designing-a-smart-custom-csv-like-parser-in-java?rq=1" class="question-hyperlink">Designing a smart custom csv-like parser in Java</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/13200136/stop-node-csv-parser-when-an-error-ocurrs?rq=1" class="question-hyperlink">Stop node-csv-parser when an error ocurrs</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/13709908/select-value-with-csv-parser?rq=1" class="question-hyperlink">Select value with CSV parser</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/13916962/fastest-csv-parser-in-perl?rq=1" class="question-hyperlink">Fastest CSV Parser in Perl</a>
</div>
<div class="spacer">
<a href="http://stackoverflow.com/questions/14634718/c-sharp-parse-csv-with-quoted-text-that-have-fields-with-quoes?rq=1" class="question-hyperlink">C# Parse CSV with quoted text that have fields with quoes</a>
</div>

        </div>
    </div>
        <div class="everyonelovesstackoverflow" id="adzerk3">
        </div>


</div>

<div id="feed-link">
    <div id="feed-link-text"><a href="http://stackoverflow.com/feeds/question/1120140" title="feed of this question and its answers"><span class="feed-icon"></span>question feed</a></div>
</div>
<script type="text/javascript">
StackExchange.ready(function(){$.get('/posts/1120140/ivc/7ced');});
</script>
<noscript>
    &lt;div&gt;&lt;img src="/posts/1120140/ivc/7ced" class="dno" alt="" width="0" height="0"&gt;&lt;/div&gt;
</noscript><div style="display:none" id="prettify-lang">lang-c</div></div>
        </div>
    </div>
    <div id="footer">
        <div class="footerwrap">
            <div id="footer-menu">
                    <a href="http://stackoverflow.com/about">about</a> |
                <a href="http://stackoverflow.com/faq">faq</a> |
                <a href="http://blog.stackexchange.com/?blb=1">blog</a> |
                    <a href="http://chat.stackoverflow.com/">chat</a> |
                <a href="http://data.stackexchange.com/">data</a> |
                <a href="http://stackexchange.com/legal">legal</a> |
                <a href="http://stackexchange.com/legal/privacy-policy">privacy policy</a> |
                <a href="http://stackexchange.com/about/hiring">jobs</a> |
                <a href="http://engine.adzerk.net/redirect/0/2776/2751/0/4de3c60f719c4dfcb1a57531c7050090/0">advertising info</a> |

                <a onclick="StackExchange.switchMobile(&#39;on&#39;, &#39;/questions/1120140/csv-parser-in-c&#39;)">mobile</a> |

                <b><a href="http://stackoverflow.com/help">contact us</a></b>
                  | <b><a href="http://meta.stackoverflow.com/">feedback</a></b>
                <div id="footer-sites">
                    
                        <span style="color:#FE7A15;font-size:140%">■</span>&nbsp;<a href="http://stackoverflow.com/">stackoverflow.com</a>&nbsp; 
                        <span style="color:#FE7A15;font-size:140%">■</span>&nbsp;<a href="http://stackapps.com/">api/apps</a>&nbsp; 
                        <span style="color:#FE7A15;font-size:140%">■</span>&nbsp;<a href="http://careers.stackoverflow.com/">careers 2.0</a>&nbsp; 
                        <span style="color:#E8272C;font-size:140%">■</span>&nbsp;<a href="http://serverfault.com/">serverfault.com</a>&nbsp; 
                        <span style="color:#00AFEF;font-size:140%">■</span>&nbsp;<a href="http://superuser.com/">superuser.com</a>&nbsp; 
                        <span style="color:#969696;font-size:140%">■</span>&nbsp;<a href="http://meta.stackoverflow.com/">meta</a>&nbsp; 
                        <span style="color:#46937D;font-size:140%">■</span>&nbsp;<a href="http://area51.stackexchange.com/">area&nbsp;51</a>&nbsp; 
                        <span style="color:#C0D0DC;font-size:140%">■</span>&nbsp;<a href="http://webapps.stackexchange.com/">webapps</a>&nbsp; 
                        <span style="color:#000000;font-size:140%">■</span>&nbsp;<a href="http://gaming.stackexchange.com/">gaming</a>&nbsp; 
                        <span style="color:#dd4814;font-size:140%">■</span>&nbsp;<a href="http://askubuntu.com/">ubuntu</a>&nbsp; 
                        <span style="color:#9ce4fe;font-size:140%">■</span>&nbsp;<a href="http://webmasters.stackexchange.com/">webmasters</a>&nbsp; 
                        <span style="color:#cf4d3f;font-size:140%">■</span>&nbsp;<a href="http://cooking.stackexchange.com/">cooking</a>&nbsp; 
                        <span style="color:#f4f28d;font-size:140%">■</span>&nbsp;<a href="http://gamedev.stackexchange.com/">game development</a>&nbsp; 
                        <span style="color:#0f3559;font-size:140%">■</span>&nbsp;<a href="http://math.stackexchange.com/">math</a>&nbsp; 
                        <span style="color:#f2f2f2;font-size:140%">■</span>&nbsp;<a href="http://photo.stackexchange.com/">photography</a>&nbsp; 
                        <span style="color:#037187;font-size:140%">■</span>&nbsp;<a href="http://stats.stackexchange.com/">stats</a>&nbsp; 
                        <span style="color:#f1e7cc;font-size:140%">■</span>&nbsp;<a href="http://tex.stackexchange.com/">tex</a>&nbsp; 
                        <span style="color:#e1cdae;font-size:140%">■</span>&nbsp;<a href="http://english.stackexchange.com/">english</a>&nbsp; 
                        <span style="color:#a2d9f6;font-size:140%">■</span>&nbsp;<a href="http://cstheory.stackexchange.com/">theoretical cs</a>&nbsp; 
                        <span style="color:#1b3e6c;font-size:140%">■</span>&nbsp;<a href="http://programmers.stackexchange.com/">programmers</a>&nbsp; 
                        <span style="color:#293a5d;font-size:140%">■</span>&nbsp;<a href="http://unix.stackexchange.com/">unix</a>&nbsp;
                        <span style="color:#bec0cb;font-size:140%">■</span>&nbsp;<a href="http://apple.stackexchange.com/">apple</a>&nbsp;
                        <span style="color:#939185;font-size:140%">■</span>&nbsp;<a href="http://wordpress.stackexchange.com/">wordpress</a>&nbsp;
                        <span style="color:#ebf5f5;font-size:140%">■</span>&nbsp;<a href="http://physics.stackexchange.com/">physics</a>&nbsp;
                        <span style="color:#4176ab;font-size:140%">■</span>&nbsp;<a href="http://diy.stackexchange.com/">home&nbsp;improvement</a>&nbsp;
                        <span style="color:#d1d8d7;font-size:140%">■</span>&nbsp;<a href="http://gis.stackexchange.com/">gis</a>&nbsp;
                        <span style="color:#e5e2d3;font-size:140%">■</span>&nbsp;<a href="http://electronics.stackexchange.com/">electrical&nbsp;engineering</a>&nbsp;
                        <span style="color:#a4c639;font-size:140%">■</span>&nbsp;<a href="http://android.stackexchange.com/">android</a>&nbsp;
                        <span style="color:#2e4e60;font-size:140%">■</span>&nbsp;<a href="http://security.stackexchange.com/">security</a>&nbsp;
                        <span style="color:#45bcb5;font-size:140%">■</span>&nbsp;<a href="http://bicycles.stackexchange.com/">bicycles</a>&nbsp;
                        <span style="color:#00adee;font-size:140%">■</span>&nbsp;<a href="http://dba.stackexchange.com/">dba</a>&nbsp;
                        <span style="color:#2edaf0;font-size:140%">■</span>&nbsp;<a href="http://drupal.stackexchange.com/">drupal</a>&nbsp;
                        <span style="color:#213951;font-size:140%">■</span>&nbsp;<a href="http://sharepoint.stackexchange.com/">sharepoint</a>&nbsp;
                        <span style="color:#73abb3;font-size:140%">■</span>&nbsp;<a href="http://scifi.stackexchange.com/">scifi&nbsp;&amp;&nbsp;fantasy</a>&nbsp;
                        <span style="color:#23629F;font-size:140%">■</span>&nbsp;<a href="http://ux.stackexchange.com/">user&nbsp;experience</a>&nbsp;
                        <span style="color:#faff72;font-size:140%">■</span>&nbsp;<a href="http://skeptics.stackexchange.com/">skeptics</a>&nbsp;
                        <span style="color:#623121;font-size:140%">■</span>&nbsp;<a href="http://rpg.stackexchange.com/">rpg</a>&nbsp;
                        <span style="color:#e4be88;font-size:140%">■</span>&nbsp;<a href="http://judaism.stackexchange.com/">judaism</a>&nbsp;
                        <span style="color:#ffecb1;font-size:140%">■</span>&nbsp;<a href="http://mathematica.stackexchange.com/">mathematica</a>&nbsp;
                        <span style="color:#1b8598;font-size:140%">■</span>&nbsp;<a href="http://travel.stackexchange.com/">travel</a>&nbsp;
                </div>
            </div>
            <div id="footer-flair">
                <a class="peer1" href="http://www.peer1.com/stackoverflow"></a>  
	            <a href="http://creativecommons.org/licenses/by-sa/3.0/" class="cc-wiki-link"></a>
                <div id="svnrev">rev 2013.2.24.519</div>
                        </div>
            <div id="copyright">
                site design / logo © 2013 stack exchange inc; 
                user contributions licensed under <a href="http://creativecommons.org/licenses/by-sa/3.0/" rel="license">cc-wiki</a> with <a href="http://blog.stackoverflow.com/2009/06/attribution-required/" rel="license">attribution required</a>
            </div>
            

        </div>
    </div>
    
    <noscript>
        &lt;div id="noscript-warning"&gt;Stack Overflow works best with JavaScript enabled&lt;img src="http://pixel.quantserve.com/pixel/p-c1rF4kxgLUzNc.gif" alt="" class="dno"&gt;&lt;/div&gt;
    </noscript>
    <script type="text/javascript">var _gaq=_gaq||[];_gaq.push(['_setAccount','UA-5620270-1']);
        _gaq.push(['_setCustomVar', 1, 'tags', '|c++|parsing|text|csv|']); 
_gaq.push(['_trackPageview']);
    var _qevents = _qevents || [];
    (function(){
        var s=document.getElementsByTagName('script')[0];
        var ga=document.createElement('script');
        ga.type='text/javascript';
        ga.async=true;
        ga.src='http://www.google-analytics.com/ga.js';
        s.parentNode.insertBefore(ga,s);
        var sc=document.createElement('script');
        sc.type='text/javascript';
        sc.async=true;
        sc.src='http://edge.quantserve.com/quant.js'; 
        s.parentNode.insertBefore(sc,s);
    })();
    </script>
    <script type="text/javascript">
        _qevents.push({ qacct: "p-c1rF4kxgLUzNc" });
    </script>    
    

<div id="tf_hui_container" dir="ltr" onselectstart="return false;" style="position: fixed;"><div id="nd_e506252a6b7649eb9640b54befbe7519_status" class="nd_e506252a6b7649eb9640b54befbe7519_status" style="background-position: 0px 0px;"><label id="labelstatus">This page <br> is safe</label></div><div id="nd_e506252a6b7649eb9640b54befbe7519_title" class="nd_e506252a6b7649eb9640b54befbe7519_title"><span class="notranslate"><label id="labeltitle">Bitdefender Total Security 2012</label></span></div><div class="nd_e506252a6b7649eb9640b54befbe7519_separator"></div><a id="nd_e506252a6b7649eb9640b54befbe7519_tooltip_sandbox" class="nd_e506252a6b7649eb9640b54befbe7519_tool" title="Sandbox" style="width:auto"><div id="nd_e506252a6b7649eb9640b54befbe7519_tooltip_sandbox_img"></div></a><div class="nd_e506252a6b7649eb9640b54befbe7519_separator"></div><a id="nd_e506252a6b7649eb9640b54befbe7519_tooltip_settings" class="nd_e506252a6b7649eb9640b54befbe7519_tool" title="Settings" style="width:auto"><div id="nd_e506252a6b7649eb9640b54befbe7519_tooltip_settings_img"></div></a><div class="nd_e506252a6b7649eb9640b54befbe7519_separator"></div><a id="nd_e506252a6b7649eb9640b54befbe7519_onoff" class="nd_e506252a6b7649eb9640b54befbe7519_onoff nd_e506252a6b7649eb9640b54befbe7519_onoff_on" title="ON/OFF"></a><a id="nd_e506252a6b7649eb9640b54befbe7519_dragger" class="nd_e506252a6b7649eb9640b54befbe7519_dragger" title="Click to expand"></a><div class="nd_e506252a6b7649eb9640b54befbe7519_settings_page"><div class="nd_e506252a6b7649eb9640b54befbe7519_settings_page_top"></div><div class="nd_e506252a6b7649eb9640b54befbe7519_settings_page_content"><p class="nd_e506252a6b7649eb9640b54befbe7519_settings_feature"><label class="labelstatustxt"><strong>Antiphishing Filter</strong><br>Blocks pages that contain phishing.</label><a id="nd_e506252a6b7649eb9640b54befbe7519_1" class="nd_e506252a6b7649eb9640b54befbe7519_settings_btn_status nd_e506252a6b7649eb9640b54befbe7519_settings_btn_status_on"></a><div class="nd_e506252a6b7649eb9640b54befbe7519_settings_feature_spacer"></div></p><p class="nd_e506252a6b7649eb9640b54befbe7519_settings_feature"><label class="labelstatustxt"><strong>Antimalware Filter</strong><br>Blocks pages that contain malware.</label><a id="nd_e506252a6b7649eb9640b54befbe7519_2" class="nd_e506252a6b7649eb9640b54befbe7519_settings_btn_status nd_e506252a6b7649eb9640b54befbe7519_settings_btn_status_on"></a><div class="nd_e506252a6b7649eb9640b54befbe7519_settings_feature_spacer"></div></p><p class="nd_e506252a6b7649eb9640b54befbe7519_settings_feature"><label class="labelstatustxt"><strong>Search advisor</strong><br>Provides advanced warning of risky websites in your search results.</label><a id="nd_e506252a6b7649eb9640b54befbe7519_3" class="nd_e506252a6b7649eb9640b54befbe7519_settings_btn_status nd_e506252a6b7649eb9640b54befbe7519_settings_btn_status_off"></a></p></div><div class="nd_e506252a6b7649eb9640b54befbe7519_settings_page_bottom"><a class="nd_e506252a6b7649eb9640b54befbe7519_settings_page_upbtn"></a></div></div></div></body></html>